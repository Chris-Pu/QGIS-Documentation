# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Benoît de Cabissole, 2015
# Jules GARNIER, 2018
# Médéric RIBREUX <mederic.ribreux__translate@medspx.fr>, 2015
# Sant-anna <delazj@gmail.com>, 2014-2015,2018,2020
# Xavier Tardieu <xapitoun@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-14 13:14+0100\n"
"PO-Revision-Date: 2020-02-17 13:43+0000\n"
"Last-Translator: Sant-anna <delazj@gmail.com>\n"
"Language-Team: French (http://www.transifex.com/qgis/qgis-documentation/language/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:7
msgid ""
"The code snippets on this page needs the following imports if you're outside"
" the pyqgis console:"
msgstr "Le fragment de code sur cette page nécessite les importations suivantes:"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
msgid "Reading And Storing Settings"
msgstr "Lecture et sauvegarde de configurations"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:25
msgid "|outofdate|"
msgstr "|outofdate|"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:27
msgid ""
"Many times it is useful for a plugin to save some variables so that the user"
" does not have to enter or select them again next time the plugin is run."
msgstr "Il est souvent utile pour une extension de sauvegarder des variables pour éviter à l'utilisateur de saisir à nouveau leur valeur ou de faire une nouvelle sélection à chaque lancement de l'extension."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:30
msgid ""
"These variables can be saved and retrieved with help of Qt and QGIS API. For"
" each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr "Ces variables peuvent être sauvegardées et récupérées grâce à Qt et à l'API QGIS. Pour chaque variable, vous devez fournir une clé qui sera utilisée pour y accéder --- pour la couleur préférée de l'utilisateur, vous pourriez utiliser la clé \"couleur_favorite\" ou toute autre chaîne de caractères explicite. Nous vous recommandons d'utiliser une convention pour nommer les clés."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:35
msgid "We can differentiate between several types of settings:"
msgstr "Nous pouvons identifier différents types de paramètres :"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:39
msgid ""
"**global settings** --- they are bound to the user at a particular machine. "
"QGIS itself stores a lot of global settings, for example, main window size "
"or default snapping tolerance. Settings are handled using the "
":class:`QgsSettings <qgis.core.QgsSettings>` class. The :meth:`setValue() "
"<qgis.core.QgsSettings.setValue>` and :meth:`value() "
"<qgis.core.QgsSettings.value>` methods from this class provide"
msgstr "**Paramètres globaux** --- ils sont liés à l'utilisateur d'une machine en particulier. QGIS enregistre lui-même un certain nombre de variables globales, par exemple, la taille de la fenêtre principale ou la tolérance d'accrochage par défaut. Les paramètres sont gérées à l'aide de la classe :class:`QgsSettings <qgis.core.QgsSettings>`, notamment via ses méthodes :meth:`setValue() <qgis.core.QgsSettings.setValue>` et :meth:`value() <qgis.core.QgsSettings.value>`."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:46
msgid "Here you can see an example of how these methods are used."
msgstr "Ci-après un exemple d'utilisation de ces méthodes."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:67
msgid ""
"The second parameter of the :meth:`value() <qgis.core.QgsSettings.value>` "
"method is optional and specifies the default value that is returned if there"
" is no previous value set for the passed setting name."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:73
msgid ""
"**project settings** --- vary between different projects and therefore they "
"are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "An example of usage follows."
msgstr "Ci-après un exemple d'utilisation."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:109
msgid ""
"As you can see, the :meth:`writeEntry() <qgis.core.QgsProject.writeEntry>` "
"method is used for all data types, but several methods exist for reading the"
" setting value back, and the corresponding one has to be selected for each "
"data type."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:116
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer instances "
"of one shapefile, they will not share the settings. The settings are stored "
"inside the project file, so if the user opens the project again, the layer-"
"related settings will be there again. The value for a given setting is "
"retrieved using the :meth:`customProperty() "
"<qgis.core.QgsMapLayer.customProperty>` method, and can be set using the "
":meth:`setCustomProperty() <qgis.core.QgsMapLayer.setCustomProperty>` one."
msgstr ""

#~ msgid "We can make difference between several types of settings:"
#~ msgstr ""

#~ msgid ""
#~ "**global settings** --- they are bound to the user at particular machine. "
#~ "QGIS itself stores a lot of global settings, for example, main window size "
#~ "or default snapping tolerance. This functionality is provided directly by Qt"
#~ " framework by the means of :class:`QSettings` class. By default, this class "
#~ "stores settings in system's \"native\" way of storing settings, that is --- "
#~ "registry (on Windows), .plist file (on macOS) or .ini file (on Unix). The "
#~ "`QSettings documentation <http://doc.qt.io/qt-4.8/qsettings.html>`_ is "
#~ "comprehensive, so we will provide just a simple example"
#~ msgstr ""

#~ msgid ""
#~ "The second parameter of the :func:`value()` method is optional and specifies"
#~ " the default value if there is no previous value set for the passed setting "
#~ "name."
#~ msgstr ""

#~ msgid ""
#~ "**project settings** --- vary between different projects and therefore they "
#~ "are connected with a project file. Map canvas background color or "
#~ "destination coordinate reference system (CRS) are examples --- white "
#~ "background and WGS84 might be suitable for one project, while yellow "
#~ "background and UTM projection are better for another one. An example of "
#~ "usage follows"
#~ msgstr ""

#~ msgid ""
#~ "As you can see, the :func:`writeEntry` method is used for all data types, "
#~ "but several methods exist for reading the setting value back, and the "
#~ "corresponding one has to be selected for each data type."
#~ msgstr ""

#~ msgid ""
#~ "**map layer settings** --- these settings are related to a particular "
#~ "instance of a map layer with a project. They are *not* connected with "
#~ "underlying data source of a layer, so if you create two map layer instances "
#~ "of one shapefile, they will not share the settings. The settings are stored "
#~ "in project file, so if the user opens the project again, the layer-related "
#~ "settings will be there again. This functionality has been added in QGIS "
#~ "v1.4. The API is similar to QSettings --- it takes and returns QVariant "
#~ "instances"
#~ msgstr ""
