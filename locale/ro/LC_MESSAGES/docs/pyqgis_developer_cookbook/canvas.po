# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Tudor Bărăscu <tudorbarascu@yahoo.com>, 2016
# Sorin Călinică <scalinica@gmail.com>, 2014-2015,2019
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-07 15:33+0200\n"
"PO-Revision-Date: 2019-12-08 18:22+0000\n"
"Last-Translator: Sorin Călinică <scalinica@gmail.com>\n"
"Language-Team: Romanian (http://www.transifex.com/qgis/qgis-documentation/language/ro/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: ro\n"
"Plural-Forms: nplurals=3; plural=(n==1?0:(((n%100>19)||((n%100==0)&&(n!=0)))?2:1));\n"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:13
msgid "Using the Map Canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:15
msgid "|outofdate|"
msgstr "|outofdate|"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:20
msgid ""
"The Map canvas widget is probably the most important widget within QGIS "
"because it shows the map composed from overlaid map layers and allows "
"interaction with the map and layers. The canvas always shows a part of the "
"map defined by the current canvas extent. The interaction is done through "
"the use of **map tools**: there are tools for panning, zooming, identifying "
"layers, measuring, vector editing and others. Similar to other graphics "
"programs, there is always one tool active and the user can switch between "
"the available tools."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:28
msgid ""
"The map canvas is implemented with the :class:`QgsMapCanvas "
"<qgis.gui.QgsMapCanvas>` class in the :mod:`qgis.gui` module. The "
"implementation is based on the Qt Graphics View framework. This framework "
"generally provides a surface and a view where custom graphics items are "
"placed and user can interact with them.  We will assume that you are "
"familiar enough with Qt to understand the concepts of the graphics scene, "
"view and items. If not, please read the `overview of the framework "
"<https://doc.qt.io/qt-5/graphicsview.html>`_."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:36
msgid ""
"Whenever the map has been panned, zoomed in/out (or some other action that "
"triggers a refresh), the map is rendered again within the current extent. "
"The layers are rendered to an image (using the :class:`QgsMapRendererJob "
"<qgis.core.QgsMapRendererJob>` class) and that image is displayed on the "
"canvas. The :class:`QgsMapCanvas <qgis.gui.QgsMapCanvas>` class also "
"controls refreshing of the rendered map. Besides this item which acts as a "
"background, there may be more **map canvas items**."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:42
msgid ""
"Typical map canvas items are rubber bands (used for measuring, vector "
"editing etc.) or vertex markers. The canvas items are usually used to give "
"visual feedback for map tools, for example, when creating a new polygon, the"
" map tool creates a rubber band canvas item that shows the current shape of "
"the polygon. All map canvas items are subclasses of :class:`QgsMapCanvasItem"
" <qgis.gui.QgsMapCanvasItem>`  which adds some more functionality to the "
"basic ``QGraphicsItem`` objects."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:51
msgid "To summarize, the map canvas architecture consists of three concepts:"
msgstr "Pentru a rezuma, arhitectura suportului pentru hartă constă în trei concepte:"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:53
msgid "map canvas --- for viewing of the map"
msgstr "suportul de hartă --- pentru vizualizarea hărții"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:54
msgid ""
"map canvas items --- additional items that can be displayed on the map "
"canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:55
msgid "map tools --- for interaction with the map canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:60
msgid "Embedding Map Canvas"
msgstr "Încapsularea suportului de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:62
msgid ""
"Map canvas is a widget like any other Qt widget, so using it is as simple as"
" creating and showing it"
msgstr "Canevasul hărții este un widget ca orice alt widget Qt, așa că utilizarea este la fel de simplă ca și crearea și afișarea lui"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:70
msgid ""
"This produces a standalone window with map canvas. It can be also embedded "
"into an existing widget or window. When using :file:`.ui` files and Qt "
"Designer, place a ``QWidget`` on the form and promote it to a new class: set"
" ``QgsMapCanvas`` as class name and set ``qgis.gui`` as header file. The "
"``pyuic5`` utility will take care of it. This is a very convenient way of "
"embedding the canvas. The other possibility is to manually write the code to"
" construct map canvas and other widgets (as children of a main window or "
"dialog) and create a layout."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:78
msgid ""
"By default, map canvas has black background and does not use anti-aliasing. "
"To set white background and enable anti-aliasing for smooth rendering"
msgstr "În mod implicit, canevasul hărții are un fundal negru și nu utilizează anti-zimțare. Pentru a seta fundalul alb și pentru a permite anti-zimțare pentru o redare mai bună"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:86
msgid ""
"(In case you are wondering, ``Qt`` comes from ``PyQt.QtCore`` module and "
"``Qt.white`` is one of the predefined ``QColor`` instances.)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:89
msgid ""
"Now it is time to add some map layers. We will first open a layer and add it"
" to the current project. Then we will set the canvas extent and set the list"
" of layers for canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:110
msgid ""
"After executing these commands, the canvas should show the layer you have "
"loaded."
msgstr "După executarea acestor comenzi, suportul ar trebui să arate stratul pe care le-ați încărcat."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:116
msgid "Rubber Bands and Vertex Markers"
msgstr "Benzile elastice și marcajele nodurilor"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:118
msgid ""
"To show some additional data on top of the map in canvas, use map canvas "
"items. It is possible to create custom canvas item classes (covered below), "
"however there are two useful canvas item classes for convenience: "
":class:`QgsRubberBand <qgis.gui.QgsRubberBand>` for drawing polylines or "
"polygons, and :class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` for "
"drawing points. They both work with map coordinates, so the shape is "
"moved/scaled automatically when the canvas is being panned or zoomed."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:126
msgid "To show a polyline"
msgstr "Pentru a afișa o polilinie"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:134
msgid "To show a polygon"
msgstr "Pentru a afișa un poligon"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:142
msgid ""
"Note that points for polygon is not a plain list: in fact, it is a list of "
"rings containing linear rings of the polygon: first ring is the outer "
"border, further (optional) rings correspond to holes in the polygon."
msgstr "Rețineți că punctele pentru poligon nu reprezintă o simplă listă: în fapt, aceasta este o listă de inele conținând inele liniare ale poligonului: primul inel reprezintă granița exterioară, în plus (opțional) inelele corespund găurilor din poligon."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:146
msgid ""
"Rubber bands allow some customization, namely to change their color and line"
" width"
msgstr "Benzile elastice acceptă unele personalizări, și anume schimbarea culorii și a lățimii liniei"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:154
msgid ""
"The canvas items are bound to the canvas scene. To temporarily hide them "
"(and show them again), use the :func:`hide` and :func:`show` combo. To "
"completely remove the item, you have to remove it from the scene of the "
"canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:162
msgid ""
"(in C++ it's possible to just delete the item, however in Python ``del r`` "
"would just delete the reference and the object will still exist as it is "
"owned by the canvas)"
msgstr "(În C + + este posibilă ștergerea doar a elementului, însă în Python ``del r`` ar șterge doar referința iar obiectul va exista în continuare, acesta fiind deținut de suport)"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:166
msgid ""
"Rubber band can be also used for drawing points, but the "
":class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` class is better suited "
"for this (:class:`QgsRubberBand <qgis.gui.QgsRubberBand>` would only draw a "
"rectangle around the desired point)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:170
msgid "You can use the vertex marker like this:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:177
msgid ""
"This will draw a red cross on position **[10,45]**. It is possible to "
"customize the icon type, size, color and pen width"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:187
msgid ""
"For temporary hiding of vertex markers and removing them from canvas, use "
"the same methods as for rubber bands."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:193
msgid "Using Map Tools with Canvas"
msgstr "Folosirea instrumentelor în suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:195
msgid ""
"The following example constructs a window that contains a map canvas and "
"basic map tools for map panning and zooming. Actions are created for "
"activation of each tool: panning is done with :class:`QgsMapToolPan "
"<qgis.gui.QgsMapToolPan>`, zooming in/out with a pair of "
":class:`QgsMapToolZoom <qgis.gui.QgsMapToolZoom>` instances. The actions are"
" set as checkable and later assigned to the tools to allow automatic "
"handling of checked/unchecked state of the actions -- when a map tool gets "
"activated, its action is marked as selected and the action of the previous "
"map tool is deselected. The map tools are activated using "
":meth:`setMapTool() <qgis.gui.QgsMapCanvas.setMapTool>` method."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:259
msgid ""
"You can try the above code in the Python console editor. To invoke the "
"canvas window, add the following lines to instantiate the ``MyWnd`` class. "
"They will render the currently selected layer on the newly created canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:271
msgid "Writing Custom Map Tools"
msgstr "Dezvoltarea instrumentelor personalizate pentru suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:273
msgid ""
"You can write your custom tools, to implement a custom behavior to actions "
"performed by users on the canvas."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:276
msgid ""
"Map tools should inherit from the :class:`QgsMapTool <qgis.gui.QgsMapTool>`,"
" class or any derived class, and selected as active tools in the canvas "
"using the :meth:`setMapTool() <qgis.gui.QgsMapCanvas.setMapTool>` method as "
"we have already seen."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:280
msgid ""
"Here is an example of a map tool that allows to define a rectangular extent "
"by clicking and dragging on the canvas. When the rectangle is defined, it "
"prints its boundary coordinates in the console. It uses the rubber band "
"elements described before to show the selected rectangle as it is being "
"defined."
msgstr "Iată un exemplu de instrument pentru hartă, care permite definirea unei limite dreptunghiulare, făcând clic și trăgând cursorul mouse-ului pe canevas. După ce este definit dreptunghiul, coordonatele sale sunt afișate în consolă. Se utilizează elementele benzii elastice descrise mai înainte, pentru a arăta dreptunghiul selectat, așa cum a fost definit."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:351
msgid "Writing Custom Map Canvas Items"
msgstr "Dezvoltarea elementelor personalizate pentru suportul de hartă "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:355
msgid "**TODO:**"
msgstr "**DE EFECTUAT:**"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:354
msgid "how to create a map canvas item"
msgstr " cum să creați un element pentru canevas"

#~ msgid "Using Map Canvas"
#~ msgstr ""

#~ msgid ""
#~ "The Map canvas widget is probably the most important widget within QGIS "
#~ "because it shows the map composed from overlaid map layers and allows "
#~ "interaction with the map and layers. The canvas shows always a part of the "
#~ "map defined by the current canvas extent. The interaction is done through "
#~ "the use of **map tools**: there are tools for panning, zooming, identifying "
#~ "layers, measuring, vector editing and others. Similar to other graphics "
#~ "programs, there is always one tool active and the user can switch between "
#~ "the available tools."
#~ msgstr ""

#~ msgid ""
#~ "Map canvas is implemented as :class:`QgsMapCanvas` class in :mod:`qgis.gui` "
#~ "module. The implementation is based on the Qt Graphics View framework. This "
#~ "framework generally provides a surface and a view where custom graphics "
#~ "items are placed and user can interact with them.  We will assume that you "
#~ "are familiar enough with Qt to understand the concepts of the graphics "
#~ "scene, view and items. If not, please make sure to read the `overview of the"
#~ " framework <http://qt-project.org/doc/qt-4.8/graphicsview.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "Whenever the map has been panned, zoomed in/out (or some other action "
#~ "triggers a refresh), the map is rendered again within the current extent. "
#~ "The layers are rendered to an image (using :class:`QgsMapRenderer` class) "
#~ "and that image is then displayed in the canvas. The graphics item (in terms "
#~ "of the Qt graphics view framework) responsible for showing the map is "
#~ ":class:`QgsMapCanvasMap` class. This class also controls refreshing of the "
#~ "rendered map. Besides this item which acts as a background, there may be "
#~ "more **map canvas items**. Typical map canvas items are rubber bands (used "
#~ "for measuring, vector editing etc.) or vertex markers. The canvas items are "
#~ "usually used to give some visual feedback for map tools, for example, when "
#~ "creating a new polygon, the map tool creates a rubber band canvas item that "
#~ "shows the current shape of the polygon. All map canvas items are subclasses "
#~ "of :class:`QgsMapCanvasItem` which adds some more functionality to the basic"
#~ " ``QGraphicsItem`` objects."
#~ msgstr ""

#~ msgid ""
#~ "map canvas items --- additional items that can be displayed in map canvas"
#~ msgstr ""

#~ msgid "map tools --- for interaction with map canvas"
#~ msgstr ""

#~ msgid ""
#~ "This produces a standalone window with map canvas. It can be also embedded "
#~ "into an existing widget or window. When using .ui files and Qt Designer, "
#~ "place a ``QWidget`` on the form and promote it to a new class: set "
#~ "``QgsMapCanvas`` as class name and set ``qgis.gui`` as header file. The "
#~ "``pyuic4`` utility will take care of it. This is a very convenient way of "
#~ "embedding the canvas. The other possibility is to manually write the code to"
#~ " construct map canvas and other widgets (as children of a main window or "
#~ "dialog) and create a layout."
#~ msgstr ""

#~ msgid ""
#~ "(In case you are wondering, ``Qt`` comes from ``PyQt4.QtCore`` module and "
#~ "``Qt.white`` is one of the predefined ``QColor`` instances.)"
#~ msgstr ""

#~ msgid ""
#~ "Now it is time to add some map layers. We will first open a layer and add it"
#~ " to the map layer registry. Then we will set the canvas extent and set the "
#~ "list of layers for canvas"
#~ msgstr ""

#~ msgid ""
#~ "The following example constructs a window that contains a map canvas and "
#~ "basic map tools for map panning and zooming. Actions are created for "
#~ "activation of each tool: panning is done with :class:`QgsMapToolPan`, "
#~ "zooming in/out with a pair of :class:`QgsMapToolZoom` instances. The actions"
#~ " are set as checkable and later assigned to the tools to allow automatic "
#~ "handling of checked/unchecked state of the actions -- when a map tool gets "
#~ "activated, its action is marked as selected and the action of the previous "
#~ "map tool is deselected. The map tools are activated using :func:`setMapTool`"
#~ " method."
#~ msgstr ""

#~ msgid ""
#~ "You can put the above code to a file, e.g. :file:`mywnd.py` and try it out "
#~ "in Python console within QGIS. This code will put the currently selected "
#~ "layer into newly created canvas"
#~ msgstr ""

#~ msgid ""
#~ "Just make sure that the :file:`mywnd.py` file is located within Python "
#~ "search path (``sys.path``). If it isn't, you can simply add it: "
#~ "``sys.path.insert(0, '/my/path')`` --- otherwise the import statement will "
#~ "fail, not finding the module."
#~ msgstr ""

#~ msgid ""
#~ "To show some additional data on top of the map in canvas, use map canvas "
#~ "items. It is possible to create custom canvas item classes (covered below), "
#~ "however there are two useful canvas item classes for convenience: "
#~ ":class:`QgsRubberBand` for drawing polylines or polygons, and "
#~ ":class:`QgsVertexMarker` for drawing points. They both work with map "
#~ "coordinates, so the shape is moved/scaled automatically when the canvas is "
#~ "being panned or zoomed."
#~ msgstr ""

#~ msgid ""
#~ "The canvas items are bound to the canvas scene. To temporarily hide them "
#~ "(and show again, use the :func:`hide` and :func:`show` combo. To completely "
#~ "remove the item, you have to remove it from the scene of the canvas"
#~ msgstr ""

#~ msgid ""
#~ "Rubber band can be also used for drawing points, however "
#~ ":class:`QgsVertexMarker` class is better suited for this "
#~ "(:class:`QgsRubberBand` would only draw a rectangle around the desired "
#~ "point). How to use the vertex marker"
#~ msgstr ""

#~ msgid ""
#~ "This will draw a red cross on position [0,0]. It is possible to customize "
#~ "the icon type, size, color and pen width"
#~ msgstr ""

#~ msgid ""
#~ "For temporary hiding of vertex markers and removing them from canvas, the "
#~ "same applies as for the rubber bands."
#~ msgstr ""

#~ msgid ""
#~ "You can write your custom tools, to implement a custom behaviour to actions "
#~ "performed by users on the canvas."
#~ msgstr ""

#~ msgid ""
#~ "Map tools should inherit from the :class:`QgsMapTool` class or any derived "
#~ "class, and selected as active tools in the canvas using the "
#~ ":func:`setMapTool` method as we have already seen."
#~ msgstr ""
