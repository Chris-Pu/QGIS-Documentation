# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Sorin Călinică <scalinica@gmail.com>, 2014-2015,2017-2018
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-14 13:14+0100\n"
"PO-Revision-Date: 2020-02-14 12:25+0000\n"
"Last-Translator: Richard Duivenvoorde <richard@duif.net>\n"
"Language-Team: Romanian (http://www.transifex.com/qgis/qgis-documentation/language/ro/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: ro\n"
"Plural-Forms: nplurals=3; plural=(n==1?0:(((n%100>19)||((n%100==0)&&(n!=0)))?2:1));\n"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:7
msgid ""
"The code snippets on this page needs the following imports if you're outside"
" the pyqgis console:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
msgid "Reading And Storing Settings"
msgstr "Citirea și stocarea setărilor"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:25
msgid "|outofdate|"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:27
msgid ""
"Many times it is useful for a plugin to save some variables so that the user"
" does not have to enter or select them again next time the plugin is run."
msgstr "De multe ori, pentru un plugin, este utilă salvarea unor variabile, astfel încât utilizatorul să nu trebuiască să le reintroducă sau să le reselecteze, la fiecare rulare a plugin-ului."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:30
msgid ""
"These variables can be saved and retrieved with help of Qt and QGIS API. For"
" each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr "Aceste variabile pot fi salvate cu ajutorul Qt și QGIS API. Pentru fiecare variabilă ar trebui să alegeți o cheie care va fi folosită pentru a accesa variabila --- pentru culoarea preferată a utilizatorului ați putea folosi o cheie de genul \"culoare_favorită\" sau orice alt șir semnificativ. Este recomandabil să folosiți o oarecare logică în denumirea cheilor."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:35
msgid "We can differentiate between several types of settings:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:39
msgid ""
"**global settings** --- they are bound to the user at a particular machine. "
"QGIS itself stores a lot of global settings, for example, main window size "
"or default snapping tolerance. Settings are handled using the "
":class:`QgsSettings <qgis.core.QgsSettings>` class. The :meth:`setValue() "
"<qgis.core.QgsSettings.setValue>` and :meth:`value() "
"<qgis.core.QgsSettings.value>` methods from this class provide"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:46
msgid "Here you can see an example of how these methods are used."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:67
msgid ""
"The second parameter of the :meth:`value() <qgis.core.QgsSettings.value>` "
"method is optional and specifies the default value that is returned if there"
" is no previous value set for the passed setting name."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:73
msgid ""
"**project settings** --- vary between different projects and therefore they "
"are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "An example of usage follows."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:109
msgid ""
"As you can see, the :meth:`writeEntry() <qgis.core.QgsProject.writeEntry>` "
"method is used for all data types, but several methods exist for reading the"
" setting value back, and the corresponding one has to be selected for each "
"data type."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:116
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer instances "
"of one shapefile, they will not share the settings. The settings are stored "
"inside the project file, so if the user opens the project again, the layer-"
"related settings will be there again. The value for a given setting is "
"retrieved using the :meth:`customProperty() "
"<qgis.core.QgsMapLayer.customProperty>` method, and can be set using the "
":meth:`setCustomProperty() <qgis.core.QgsMapLayer.setCustomProperty>` one."
msgstr ""

#~ msgid "We can make difference between several types of settings:"
#~ msgstr ""

#~ msgid ""
#~ "**global settings** --- they are bound to the user at particular machine. "
#~ "QGIS itself stores a lot of global settings, for example, main window size "
#~ "or default snapping tolerance. This functionality is provided directly by Qt"
#~ " framework by the means of :class:`QSettings` class. By default, this class "
#~ "stores settings in system's \"native\" way of storing settings, that is --- "
#~ "registry (on Windows), .plist file (on macOS) or .ini file (on Unix). The "
#~ "`QSettings documentation <http://doc.qt.io/qt-4.8/qsettings.html>`_ is "
#~ "comprehensive, so we will provide just a simple example"
#~ msgstr ""

#~ msgid ""
#~ "The second parameter of the :func:`value()` method is optional and specifies"
#~ " the default value if there is no previous value set for the passed setting "
#~ "name."
#~ msgstr ""

#~ msgid ""
#~ "**project settings** --- vary between different projects and therefore they "
#~ "are connected with a project file. Map canvas background color or "
#~ "destination coordinate reference system (CRS) are examples --- white "
#~ "background and WGS84 might be suitable for one project, while yellow "
#~ "background and UTM projection are better for another one. An example of "
#~ "usage follows"
#~ msgstr ""

#~ msgid ""
#~ "As you can see, the :func:`writeEntry` method is used for all data types, "
#~ "but several methods exist for reading the setting value back, and the "
#~ "corresponding one has to be selected for each data type."
#~ msgstr ""

#~ msgid ""
#~ "**map layer settings** --- these settings are related to a particular "
#~ "instance of a map layer with a project. They are *not* connected with "
#~ "underlying data source of a layer, so if you create two map layer instances "
#~ "of one shapefile, they will not share the settings. The settings are stored "
#~ "in project file, so if the user opens the project again, the layer-related "
#~ "settings will be there again. This functionality has been added in QGIS "
#~ "v1.4. The API is similar to QSettings --- it takes and returns QVariant "
#~ "instances"
#~ msgstr ""
