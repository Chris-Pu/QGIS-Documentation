# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# BJ Jang <jangbi882@gmail.com>, 2015
# Kwon.Yongchan <ruvyn@naver.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-11 14:48+0200\n"
"PO-Revision-Date: 2019-08-11 13:01+0000\n"
"Last-Translator: Richard Duivenvoorde <richard@duif.net>\n"
"Language-Team: Korean (http://www.transifex.com/qgis/qgis-documentation/language/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:11
msgid "Map Rendering and Printing"
msgstr "맵 렌더링 및 출력"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:13
msgid "The code snippets on this page needs the following imports:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:22
msgid ""
"There are generally two approaches when input data should be rendered as a "
"map: either do it quick way using `QgsMapRendererJob` or produce more fine-"
"tuned output by composing the map with the :class:`QgsLayout "
"<qgis.core.QgsLayout>` class."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:29
msgid "Simple Rendering"
msgstr "단순 렌더링"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:31
msgid ""
"The rendering is done creating a :class:`QgsMapSettings "
"<qgis.core.QgsMapSettings>` object to define the rendering options, and then"
" constructing a :class:`QgsMapRendererJob <qgis.core.QgsMapRendererJob>` "
"with those options. The latter is then used to create the resulting image."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:35
msgid "Here's an example:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:63
msgid "Rendering layers with different CRS"
msgstr "서로 다른 좌표계를 가진 레이어들을 렌더링하기"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:65
msgid ""
"If you have more than one layer and they have a different CRS, the simple "
"example above will probably not work: to get the right values from the "
"extent calculations you have to explicitly set the destination CRS"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:77
msgid "Output using print layout"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:79
msgid ""
"Print layout is a very handy tool if you would like to do a more "
"sophisticated output than the simple rendering shown above. It is possible "
"to create complex map layouts consisting of map views, labels, legend, "
"tables and other elements that are usually present on paper maps. The "
"layouts can be then exported to PDF, raster images or directly printed on a "
"printer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:85
msgid ""
"The layout consists of a bunch of classes. They all belong to the core "
"library. QGIS application has a convenient GUI for placement of the "
"elements, though it is not available in the GUI library. If you are not "
"familiar with `Qt Graphics View framework "
"<http://doc.qt.io/qt-5/graphicsview.html>`_, then you are encouraged to "
"check the documentation now, because the layout is based on it."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:92
msgid ""
"The central class of the layout is the :class:`QgsLayout "
"<qgis.core.QgsLayout>` class, which is derived from the Qt `QGraphicsScene "
"<https://doc.qt.io/qt-5/qgraphicsscene.html>`_ class. Let us create an "
"instance of it:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:102
msgid ""
"Now we can add various elements (map, label, ...) to the layout. All these "
"objects are represented by classes that inherit from the base "
":class:`QgsLayoutItem <qgis.core.QgsLayoutItem>` class."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:105
msgid ""
"Here's a description of some of the main layout items that can be added to a"
" layout."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:107
msgid ""
"map --- this item tells the libraries where to put the map itself. Here we "
"create a map and stretch it over the whole paper size"
msgstr "맵 --- 이 아이템은 라이브러리에게 맵 자체를 어디에 놓을지 말해줍니다. 다음은 맵을 생성해서 종이 크기 전체로 늘리는 예시 코드입니다."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:115
msgid ""
"label --- allows displaying labels. It is possible to modify its font, "
"color, alignment and margin"
msgstr "라벨 --- 라벨을 표출할 수 있도록 해줍니다. 폰트, 색상, 정렬 및 여백을 수정할 수 있습니다."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:125
msgid "legend"
msgstr "범례"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:133
msgid "scale bar"
msgstr "축척막대(scale bar)"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:143
msgid "arrow"
msgstr "화살표"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:144
msgid "picture"
msgstr "그림"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:145
msgid "basic shape"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:146
msgid "nodes based shape"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:170
msgid "table"
msgstr "표"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:172
msgid "Once an item is added to the layout, it can be moved and resized:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:179
msgid ""
"A frame is drawn around each item by default. You can remove it as follows:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:186
msgid ""
"Besides creating the layout items by hand, QGIS has support for layout "
"templates which are essentially compositions with all their items saved to a"
" .qpt file (with XML syntax)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:190
msgid ""
"Once the composition is ready (the layout items have been created and added "
"to the composition), we can proceed to produce a raster and/or vector "
"output."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:196
msgid "Exporting the layout"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:198
msgid ""
"To export a layout, the :class:`QgsLayoutExporter "
"<qgis.core.QgsLayoutExporter>` class must be used."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:208
msgid ""
"Use the :meth:`exportToImage() <qgis.core.QgsLayoutExporter.exportToImage>` "
"in case you want to export to an image instead of a PDF file."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:212
msgid "Exporting a layout atlas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:214
msgid ""
"If you want to export all pages from a layout that has the atlas option "
"configured and enabled, you need to use the :meth:`atlas() "
"<qgis.core.QgsPrintLayout.atlas>` method in the exporter "
"(:class:`QgsLayoutExporter <qgis.core.QgsLayoutExporter>`) with small "
"adjustments. In the following example, the pages are exported to PNG images:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:224
msgid ""
"Notice that the outputs will be saved in the base path folder, using the "
"output filename expression configured on atlas."
msgstr ""

#~ msgid ""
#~ "There are generally two approaches when input data should be rendered as a "
#~ "map: either do it quick way using :class:`QgsMapRenderer` or produce more "
#~ "fine-tuned output by composing the map with :class:`QgsComposition` class "
#~ "and friends."
#~ msgstr ""

#~ msgid ""
#~ "Render some layers using :class:`QgsMapRenderer` --- create destination "
#~ "paint device (``QImage``, ``QPainter`` etc.), set up layer set, extent, "
#~ "output size and do the rendering"
#~ msgstr ""

#~ msgid ""
#~ "If you have more than one layer and they have a different CRS, the simple "
#~ "example above will probably not work: to get the right values from the "
#~ "extent calculations you have to explicitly set the destination CRS and "
#~ "enable OTF reprojection as in the example below (only the renderer "
#~ "configuration part is reported)"
#~ msgstr ""

#~ msgid "Output using Map Composer"
#~ msgstr ""

#~ msgid ""
#~ "Map composer is a very handy tool if you would like to do a more "
#~ "sophisticated output than the simple rendering shown above. Using the "
#~ "composer it is possible to create complex map layouts consisting of map "
#~ "views, labels, legend, tables and other elements that are usually present on"
#~ " paper maps. The layouts can be then exported to PDF, raster images or "
#~ "directly printed on a printer."
#~ msgstr ""

#~ msgid ""
#~ "The composer consists of a bunch of classes. They all belong to the core "
#~ "library. QGIS application has a convenient GUI for placement of the "
#~ "elements, though it is not available in the GUI library. If you are not "
#~ "familiar with `Qt Graphics View framework "
#~ "<http://doc.qt.io/qt-4.8/qgraphicsview.html>`_, then you are encouraged to "
#~ "check the documentation now, because the composer is based on it. Also check"
#~ " the `Python documentation of the implementation of QGraphicView "
#~ "<http://pyqt.sourceforge.net/Docs/PyQt4/qgraphicsview.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "The central class of the composer is :class:`QgsComposition` which is "
#~ "derived from :class:`QGraphicsScene`. Let us create one"
#~ msgstr ""

#~ msgid ""
#~ "Note that the composition takes an instance of :class:`QgsMapRenderer`. In "
#~ "the code we expect we are running within QGIS application and thus use the "
#~ "map renderer from map canvas. The composition uses various parameters from "
#~ "the map renderer, most importantly the default set of map layers and the "
#~ "current extent. When using composer in a standalone application, you can "
#~ "create your own map renderer instance the same way as shown in the section "
#~ "above and pass it to the composition."
#~ msgstr ""

#~ msgid ""
#~ "It is possible to add various elements (map, label, ...) to the composition "
#~ "--- these elements have to be descendants of :class:`QgsComposerItem` class."
#~ " Currently supported items are:"
#~ msgstr ""

#~ msgid ""
#~ "By default the newly created composer items have zero position (top left "
#~ "corner of the page) and zero size. The position and size are always measured"
#~ " in millimeters"
#~ msgstr ""

#~ msgid "A frame is drawn around each item by default. How to remove the frame"
#~ msgstr ""

#~ msgid ""
#~ "Besides creating the composer items by hand, QGIS has support for composer "
#~ "templates which are essentially compositions with all their items saved to a"
#~ " .qpt file (with XML syntax). Unfortunately this functionality is not yet "
#~ "available in the API."
#~ msgstr ""

#~ msgid ""
#~ "Once the composition is ready (the composer items have been created and "
#~ "added to the composition), we can proceed to produce a raster and/or vector "
#~ "output."
#~ msgstr ""

#~ msgid ""
#~ "The default output settings for composition are page size A4 and resolution "
#~ "300 DPI. You can change them if necessary. The paper size is specified in "
#~ "millimeters"
#~ msgstr ""

#~ msgid "Output to a raster image"
#~ msgstr ""

#~ msgid ""
#~ "The following code fragment shows how to render a composition to a raster "
#~ "image"
#~ msgstr ""

#~ msgid "Output to PDF"
#~ msgstr ""

#~ msgid "The following code fragment renders a composition to a PDF file"
#~ msgstr ""

#~ msgid ""
#~ "The central class of the layout is the :class:`QgsLayout "
#~ "<qgis.core.QgsLayout>` class, which is derived from the Qt "
#~ ":class:`QGraphicsScene` class. Let us create an instance of it:"
#~ msgstr ""
