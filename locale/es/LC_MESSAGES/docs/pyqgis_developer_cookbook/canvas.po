# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Fran Raga <FRANKA1986@gmail.com>, 2017
# Fran Raga <FRANKA1986@gmail.com>, 2019
# Igor F. Davalos Rojas <idavalosr@gmail.com>, 2015
# Minerva Durán Martínez <mine_tod@yahoo.com.mx>, 2016
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-07 15:33+0200\n"
"PO-Revision-Date: 2019-09-04 08:21+0000\n"
"Last-Translator: Fran Raga <FRANKA1986@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/qgis/qgis-documentation/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:13
msgid "Using the Map Canvas"
msgstr "Usando el Lienzo de Mapa"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:15
msgid "|outofdate|"
msgstr "|outofdate|"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:20
msgid ""
"The Map canvas widget is probably the most important widget within QGIS "
"because it shows the map composed from overlaid map layers and allows "
"interaction with the map and layers. The canvas always shows a part of the "
"map defined by the current canvas extent. The interaction is done through "
"the use of **map tools**: there are tools for panning, zooming, identifying "
"layers, measuring, vector editing and others. Similar to other graphics "
"programs, there is always one tool active and the user can switch between "
"the available tools."
msgstr "El widget del lienzo del mapa es probablemente el widget más importante dentro de QGIS porque muestra el mapa integrado de capas de mapas superpuestos y permite la interacción con el mapa y las capas. El lienzo muestra siempre una parte del mapa definido por el alcance del lienzo actual. La interacción se realiza mediante el uso de **herramientas de mapa**: hay herramientas para desplazamiento, zum, la identificación de las capas, de medida, para editar vectores y otros. Al igual que en otros programas de gráficos, siempre hay una herramienta activa y el usuario puede cambiar entre las herramientas disponibles."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:28
msgid ""
"The map canvas is implemented with the :class:`QgsMapCanvas "
"<qgis.gui.QgsMapCanvas>` class in the :mod:`qgis.gui` module. The "
"implementation is based on the Qt Graphics View framework. This framework "
"generally provides a surface and a view where custom graphics items are "
"placed and user can interact with them.  We will assume that you are "
"familiar enough with Qt to understand the concepts of the graphics scene, "
"view and items. If not, please read the `overview of the framework "
"<https://doc.qt.io/qt-5/graphicsview.html>`_."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:36
msgid ""
"Whenever the map has been panned, zoomed in/out (or some other action that "
"triggers a refresh), the map is rendered again within the current extent. "
"The layers are rendered to an image (using the :class:`QgsMapRendererJob "
"<qgis.core.QgsMapRendererJob>` class) and that image is displayed on the "
"canvas. The :class:`QgsMapCanvas <qgis.gui.QgsMapCanvas>` class also "
"controls refreshing of the rendered map. Besides this item which acts as a "
"background, there may be more **map canvas items**."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:42
msgid ""
"Typical map canvas items are rubber bands (used for measuring, vector "
"editing etc.) or vertex markers. The canvas items are usually used to give "
"visual feedback for map tools, for example, when creating a new polygon, the"
" map tool creates a rubber band canvas item that shows the current shape of "
"the polygon. All map canvas items are subclasses of :class:`QgsMapCanvasItem"
" <qgis.gui.QgsMapCanvasItem>`  which adds some more functionality to the "
"basic ``QGraphicsItem`` objects."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:51
msgid "To summarize, the map canvas architecture consists of three concepts:"
msgstr "Para resumir, la arquitectura del lienzo de mapa consiste en tres conceptos:"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:53
msgid "map canvas --- for viewing of the map"
msgstr "lienzo de mapa --- para la visualización del mapa"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:54
msgid ""
"map canvas items --- additional items that can be displayed on the map "
"canvas"
msgstr "Los elementos de lienzo de mapa --- los elementos adicionales que se pueden desplegar en un lienzo de mapa"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:55
msgid "map tools --- for interaction with the map canvas"
msgstr "herramientas de mapa --- para interactuar con el lienzo del mapa"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:60
msgid "Embedding Map Canvas"
msgstr "Lienzo de mapa insertado"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:62
msgid ""
"Map canvas is a widget like any other Qt widget, so using it is as simple as"
" creating and showing it"
msgstr "El lienzo de mapa es un widget como cualquier otro widget Qt, por lo que utilizarlo es tan sencillo como crearlo y mostrarlo"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:70
msgid ""
"This produces a standalone window with map canvas. It can be also embedded "
"into an existing widget or window. When using :file:`.ui` files and Qt "
"Designer, place a ``QWidget`` on the form and promote it to a new class: set"
" ``QgsMapCanvas`` as class name and set ``qgis.gui`` as header file. The "
"``pyuic5`` utility will take care of it. This is a very convenient way of "
"embedding the canvas. The other possibility is to manually write the code to"
" construct map canvas and other widgets (as children of a main window or "
"dialog) and create a layout."
msgstr "Esto produce una ventana independiente con el lienzo de mapa. Puede también ser incrustado en un widget existente o ventana. Al utilizar archivo ui y Qt Designer, coloque un ``QWidget`` sobre el formulario y promuévalo a una nueva clase: establezca ``QgsMapCanvas`` como nombre de clase y ``qgis.gui`` como archivo de encabezado. La utilidad ``pyuic5`` se hará cargo de ella. Esta es una forma conveniente de incrustar el lienzo. La otra posibilidad es escribir manualmente el código para construir el lienzo del mapa y otros widgets (como hijos de una ventana principal o diálogo) y crea un diseño."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:78
msgid ""
"By default, map canvas has black background and does not use anti-aliasing. "
"To set white background and enable anti-aliasing for smooth rendering"
msgstr "Por defecto, el lienzo de mapa tiene un fondo negro y no utiliza anti-aliasing. Para establecer el fondo blanco y habilitar el anti-aliasing para suavisar la presentación"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:86
msgid ""
"(In case you are wondering, ``Qt`` comes from ``PyQt.QtCore`` module and "
"``Qt.white`` is one of the predefined ``QColor`` instances.)"
msgstr "(En caso de que se esté preguntando, ``Qt`` viene del modulo ``PyQt.QtCore`` y ``Qt.white`` es uno de lo que predefine las instancias ``QColor``.)"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:89
msgid ""
"Now it is time to add some map layers. We will first open a layer and add it"
" to the current project. Then we will set the canvas extent and set the list"
" of layers for canvas"
msgstr "Ahora es tiempo de añadir algunas capas. Primero, abriremos una capa y lo añadiremos al proyecto actual. A continuación, vamos a establecer la extensión del lienzo y la lista de capas para el lienzo "

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:110
msgid ""
"After executing these commands, the canvas should show the layer you have "
"loaded."
msgstr "Después de ejecutar estos comandos, el lienzo debe mostrar la capa que se ha cargado."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:116
msgid "Rubber Bands and Vertex Markers"
msgstr "Bandas elásticas y marcadores de vértices"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:118
msgid ""
"To show some additional data on top of the map in canvas, use map canvas "
"items. It is possible to create custom canvas item classes (covered below), "
"however there are two useful canvas item classes for convenience: "
":class:`QgsRubberBand <qgis.gui.QgsRubberBand>` for drawing polylines or "
"polygons, and :class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` for "
"drawing points. They both work with map coordinates, so the shape is "
"moved/scaled automatically when the canvas is being panned or zoomed."
msgstr "Para mostrar algunos datos adicionales en la parte superior del mapa en el lienzo, utilice los elementos del lienzo de mapa. Es posible crear clases de elementos del lienzo personalizada (cubiertas más abajo), sin embargo, hay dos clases de elementos de lienzo útiles para mayor comodidad :class:`QgsRubberBand <qgis.gui.QgsRubberBand>` para dibujar polilíneas o polígonos, y :class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` para dibujar puntos. Ambos trabajan con coordenadas de mapa, por lo que la figura se mueve/ se escala de forma automática cuando el lienzo está siendo desplazado o haciendo zum."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:126
msgid "To show a polyline"
msgstr "Para mostrar una polilínea"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:134
msgid "To show a polygon"
msgstr "Para mostrar un polígono"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:142
msgid ""
"Note that points for polygon is not a plain list: in fact, it is a list of "
"rings containing linear rings of the polygon: first ring is the outer "
"border, further (optional) rings correspond to holes in the polygon."
msgstr "Tenga en cuenta que los puntos de polígonos no es una lista simple: de hecho, es una lista de anillos que contienen lista de anillos del polígono: el primer anillo es el borde exterior, anillos adicionales (opcional) corresponden a los agujeros en el polígono."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:146
msgid ""
"Rubber bands allow some customization, namely to change their color and line"
" width"
msgstr "Las bandas elásticas permiten algún tipo de personalizacion, es decir, para cambiar su color o ancho de línea"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:154
msgid ""
"The canvas items are bound to the canvas scene. To temporarily hide them "
"(and show them again), use the :func:`hide` and :func:`show` combo. To "
"completely remove the item, you have to remove it from the scene of the "
"canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:162
msgid ""
"(in C++ it's possible to just delete the item, however in Python ``del r`` "
"would just delete the reference and the object will still exist as it is "
"owned by the canvas)"
msgstr "(en C++ es posible simplemente eliminar el elemento, sin embargo en Python ``del r`` sería simplemente suprimir la referencia y el objeto aún existirá ya que es propiedad del lienzo)"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:166
msgid ""
"Rubber band can be also used for drawing points, but the "
":class:`QgsVertexMarker <qgis.gui.QgsVertexMarker>` class is better suited "
"for this (:class:`QgsRubberBand <qgis.gui.QgsRubberBand>` would only draw a "
"rectangle around the desired point)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:170
msgid "You can use the vertex marker like this:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:177
msgid ""
"This will draw a red cross on position **[10,45]**. It is possible to "
"customize the icon type, size, color and pen width"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:187
msgid ""
"For temporary hiding of vertex markers and removing them from canvas, use "
"the same methods as for rubber bands."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:193
msgid "Using Map Tools with Canvas"
msgstr "Utilizar las herramientas del mapa con el lienzo"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:195
msgid ""
"The following example constructs a window that contains a map canvas and "
"basic map tools for map panning and zooming. Actions are created for "
"activation of each tool: panning is done with :class:`QgsMapToolPan "
"<qgis.gui.QgsMapToolPan>`, zooming in/out with a pair of "
":class:`QgsMapToolZoom <qgis.gui.QgsMapToolZoom>` instances. The actions are"
" set as checkable and later assigned to the tools to allow automatic "
"handling of checked/unchecked state of the actions -- when a map tool gets "
"activated, its action is marked as selected and the action of the previous "
"map tool is deselected. The map tools are activated using "
":meth:`setMapTool() <qgis.gui.QgsMapCanvas.setMapTool>` method."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:259
msgid ""
"You can try the above code in the Python console editor. To invoke the "
"canvas window, add the following lines to instantiate the ``MyWnd`` class. "
"They will render the currently selected layer on the newly created canvas"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:271
msgid "Writing Custom Map Tools"
msgstr "Escribir herramientas de mapa personalizados"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:273
msgid ""
"You can write your custom tools, to implement a custom behavior to actions "
"performed by users on the canvas."
msgstr "Puede escribir sus herramientas personalizadas, para implementar un comportamiento personalizado a las acciones realizadas por los usuarios en el lienzo."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:276
msgid ""
"Map tools should inherit from the :class:`QgsMapTool <qgis.gui.QgsMapTool>`,"
" class or any derived class, and selected as active tools in the canvas "
"using the :meth:`setMapTool() <qgis.gui.QgsMapCanvas.setMapTool>` method as "
"we have already seen."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:280
msgid ""
"Here is an example of a map tool that allows to define a rectangular extent "
"by clicking and dragging on the canvas. When the rectangle is defined, it "
"prints its boundary coordinates in the console. It uses the rubber band "
"elements described before to show the selected rectangle as it is being "
"defined."
msgstr "Aquí esta un ejemplo de una herramienta de mapa para definir una extensión rectangular haciendo clic y arrastrando en el lienzo. Cuando se define el rectángulo, imprime su limite de coordenadas en la consola. Utiliza los elementos de la banda elástica descrita antes para mostrar el rectángulo seleccionado ya que se esta definiendo."

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:351
msgid "Writing Custom Map Canvas Items"
msgstr "Escribir elementos de lienzo de mapa personalizado"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:355
msgid "**TODO:**"
msgstr "**PENDIENTE:**"

#: ../../source/docs/pyqgis_developer_cookbook/canvas.rst:354
msgid "how to create a map canvas item"
msgstr "cómo crear un elemento de lienzo de mapa"

#~ msgid "Using Map Canvas"
#~ msgstr ""

#~ msgid ""
#~ "The Map canvas widget is probably the most important widget within QGIS "
#~ "because it shows the map composed from overlaid map layers and allows "
#~ "interaction with the map and layers. The canvas shows always a part of the "
#~ "map defined by the current canvas extent. The interaction is done through "
#~ "the use of **map tools**: there are tools for panning, zooming, identifying "
#~ "layers, measuring, vector editing and others. Similar to other graphics "
#~ "programs, there is always one tool active and the user can switch between "
#~ "the available tools."
#~ msgstr ""

#~ msgid ""
#~ "Map canvas is implemented as :class:`QgsMapCanvas` class in :mod:`qgis.gui` "
#~ "module. The implementation is based on the Qt Graphics View framework. This "
#~ "framework generally provides a surface and a view where custom graphics "
#~ "items are placed and user can interact with them.  We will assume that you "
#~ "are familiar enough with Qt to understand the concepts of the graphics "
#~ "scene, view and items. If not, please make sure to read the `overview of the"
#~ " framework <http://qt-project.org/doc/qt-4.8/graphicsview.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "Whenever the map has been panned, zoomed in/out (or some other action "
#~ "triggers a refresh), the map is rendered again within the current extent. "
#~ "The layers are rendered to an image (using :class:`QgsMapRenderer` class) "
#~ "and that image is then displayed in the canvas. The graphics item (in terms "
#~ "of the Qt graphics view framework) responsible for showing the map is "
#~ ":class:`QgsMapCanvasMap` class. This class also controls refreshing of the "
#~ "rendered map. Besides this item which acts as a background, there may be "
#~ "more **map canvas items**. Typical map canvas items are rubber bands (used "
#~ "for measuring, vector editing etc.) or vertex markers. The canvas items are "
#~ "usually used to give some visual feedback for map tools, for example, when "
#~ "creating a new polygon, the map tool creates a rubber band canvas item that "
#~ "shows the current shape of the polygon. All map canvas items are subclasses "
#~ "of :class:`QgsMapCanvasItem` which adds some more functionality to the basic"
#~ " ``QGraphicsItem`` objects."
#~ msgstr ""

#~ msgid ""
#~ "map canvas items --- additional items that can be displayed in map canvas"
#~ msgstr ""

#~ msgid "map tools --- for interaction with map canvas"
#~ msgstr ""

#~ msgid ""
#~ "This produces a standalone window with map canvas. It can be also embedded "
#~ "into an existing widget or window. When using .ui files and Qt Designer, "
#~ "place a ``QWidget`` on the form and promote it to a new class: set "
#~ "``QgsMapCanvas`` as class name and set ``qgis.gui`` as header file. The "
#~ "``pyuic4`` utility will take care of it. This is a very convenient way of "
#~ "embedding the canvas. The other possibility is to manually write the code to"
#~ " construct map canvas and other widgets (as children of a main window or "
#~ "dialog) and create a layout."
#~ msgstr ""

#~ msgid ""
#~ "(In case you are wondering, ``Qt`` comes from ``PyQt4.QtCore`` module and "
#~ "``Qt.white`` is one of the predefined ``QColor`` instances.)"
#~ msgstr ""

#~ msgid ""
#~ "Now it is time to add some map layers. We will first open a layer and add it"
#~ " to the map layer registry. Then we will set the canvas extent and set the "
#~ "list of layers for canvas"
#~ msgstr ""

#~ msgid ""
#~ "The following example constructs a window that contains a map canvas and "
#~ "basic map tools for map panning and zooming. Actions are created for "
#~ "activation of each tool: panning is done with :class:`QgsMapToolPan`, "
#~ "zooming in/out with a pair of :class:`QgsMapToolZoom` instances. The actions"
#~ " are set as checkable and later assigned to the tools to allow automatic "
#~ "handling of checked/unchecked state of the actions -- when a map tool gets "
#~ "activated, its action is marked as selected and the action of the previous "
#~ "map tool is deselected. The map tools are activated using :func:`setMapTool`"
#~ " method."
#~ msgstr ""

#~ msgid ""
#~ "You can put the above code to a file, e.g. :file:`mywnd.py` and try it out "
#~ "in Python console within QGIS. This code will put the currently selected "
#~ "layer into newly created canvas"
#~ msgstr ""

#~ msgid ""
#~ "Just make sure that the :file:`mywnd.py` file is located within Python "
#~ "search path (``sys.path``). If it isn't, you can simply add it: "
#~ "``sys.path.insert(0, '/my/path')`` --- otherwise the import statement will "
#~ "fail, not finding the module."
#~ msgstr ""

#~ msgid ""
#~ "To show some additional data on top of the map in canvas, use map canvas "
#~ "items. It is possible to create custom canvas item classes (covered below), "
#~ "however there are two useful canvas item classes for convenience: "
#~ ":class:`QgsRubberBand` for drawing polylines or polygons, and "
#~ ":class:`QgsVertexMarker` for drawing points. They both work with map "
#~ "coordinates, so the shape is moved/scaled automatically when the canvas is "
#~ "being panned or zoomed."
#~ msgstr ""

#~ msgid ""
#~ "The canvas items are bound to the canvas scene. To temporarily hide them "
#~ "(and show again, use the :func:`hide` and :func:`show` combo. To completely "
#~ "remove the item, you have to remove it from the scene of the canvas"
#~ msgstr ""

#~ msgid ""
#~ "Rubber band can be also used for drawing points, however "
#~ ":class:`QgsVertexMarker` class is better suited for this "
#~ "(:class:`QgsRubberBand` would only draw a rectangle around the desired "
#~ "point). How to use the vertex marker"
#~ msgstr ""

#~ msgid ""
#~ "This will draw a red cross on position [0,0]. It is possible to customize "
#~ "the icon type, size, color and pen width"
#~ msgstr ""

#~ msgid ""
#~ "For temporary hiding of vertex markers and removing them from canvas, the "
#~ "same applies as for the rubber bands."
#~ msgstr ""

#~ msgid ""
#~ "You can write your custom tools, to implement a custom behaviour to actions "
#~ "performed by users on the canvas."
#~ msgstr ""

#~ msgid ""
#~ "Map tools should inherit from the :class:`QgsMapTool` class or any derived "
#~ "class, and selected as active tools in the canvas using the "
#~ ":func:`setMapTool` method as we have already seen."
#~ msgstr ""
