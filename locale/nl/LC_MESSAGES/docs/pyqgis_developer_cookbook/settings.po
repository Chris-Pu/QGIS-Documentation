# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Dick Groskamp, 2015,2017,2019-2020
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-14 13:14+0100\n"
"PO-Revision-Date: 2020-02-14 14:22+0000\n"
"Last-Translator: Dick Groskamp\n"
"Language-Team: Dutch (http://www.transifex.com/qgis/qgis-documentation/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:7
msgid ""
"The code snippets on this page needs the following imports if you're outside"
" the pyqgis console:"
msgstr "De codesnippers op deze pagina hebben de volgende import nodig als u buiten de console van PyQGIS bent:"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
msgid "Reading And Storing Settings"
msgstr "Instellingen lezen en opslaan"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:25
msgid "|outofdate|"
msgstr "|outofdate|"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:27
msgid ""
"Many times it is useful for a plugin to save some variables so that the user"
" does not have to enter or select them again next time the plugin is run."
msgstr "Vaak is het voor een plug-in nuttig om enkele variabelen op te slaan zodat de gebruiker ze niet opnieuw hoeft in te voeren of te selecteren als de plug-in een volgende keer wordt uitgevoerd."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:30
msgid ""
"These variables can be saved and retrieved with help of Qt and QGIS API. For"
" each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr "Deze variabelen kunnen worden opgeslagen en weer worden opgehaald met de hulp van Qt en de API van QGIS. Voor elke variabele zou u een sleutel moeten kiezen die kan worden gebruikt om toegang te verkrijgen tot de variabele --- voor de favoriete kleur van de gebruiker zou u de sleutel \"favourite_color\" kunnen gebruiken of elke andere tekenreeks met betekenis. Het wordt aanbevolen enige structuur aan te brengen in het benoemen van sleutels."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:35
msgid "We can differentiate between several types of settings:"
msgstr "We kunnen onderscheid maken tussen de verschillende typen instellingen:"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:39
msgid ""
"**global settings** --- they are bound to the user at a particular machine. "
"QGIS itself stores a lot of global settings, for example, main window size "
"or default snapping tolerance. Settings are handled using the "
":class:`QgsSettings <qgis.core.QgsSettings>` class. The :meth:`setValue() "
"<qgis.core.QgsSettings.setValue>` and :meth:`value() "
"<qgis.core.QgsSettings.value>` methods from this class provide"
msgstr "**globale instellingen** --- zij zijn gebonden aan de gebruiker op een bepaalde machine. QGIS slaat zelf heel veel globale instellingen op, bijvoorbeeld, de grootte van het hoofdvenster of de standaard tolerantie voor snappen. Instellingen worden afgehandeld door de klasse :class:`QSettings <qgis.core.QgsSettings>`. De methoden :meth:`setValue() <qgis.core.QgsSettings.setValue>` en :meth:`value() <qgis.core.QgsSettings.value>` van deze klasse verschaffen"

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:46
msgid "Here you can see an example of how these methods are used."
msgstr "Hier ziet u een voorbeeld van hoe deze methoden worden gebruikt."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:67
msgid ""
"The second parameter of the :meth:`value() <qgis.core.QgsSettings.value>` "
"method is optional and specifies the default value that is returned if there"
" is no previous value set for the passed setting name."
msgstr "De tweede parameter van de methode :meth:`value() <qgis.core.QgsSettings.value>` is optioneel en specificeert de standaard waarde als er geen eerdere waarde is ingesteld voor de doorgegeven naam van de instelling."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:73
msgid ""
"**project settings** --- vary between different projects and therefore they "
"are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one."
msgstr "**projectinstellingen** --- variëren tussen de verschillende projecten en daarom zijn ze gebonden aan een projectbestand. De kleur van de achtergrond van het kaartvenster of het doel coördinaten referentiesysteem (CRS) zijn daar voorbeelden van --- een witte achtergrond en WGS84 zouden misschien geschikt zijn voor het ene project, terwijl een gele achtergrond en de projectie UTM beter geschikt zijn voor een ander."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:79
msgid "An example of usage follows."
msgstr "Een voorbeeld van het gebruik volgt nog."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:109
msgid ""
"As you can see, the :meth:`writeEntry() <qgis.core.QgsProject.writeEntry>` "
"method is used for all data types, but several methods exist for reading the"
" setting value back, and the corresponding one has to be selected for each "
"data type."
msgstr "Zoals u kunt zien wordt de methode :meth:`writeEntry() <qgis.core.QgsProject.writeEntry>` gebruikt voor alle gegevenstypen, maar er bestaan verscheidene methoden om de waarde van de instelling terug in te lezen, en de corresponderende moet worden geselecteerd voor elk gegevenstype."

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:116
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer instances "
"of one shapefile, they will not share the settings. The settings are stored "
"inside the project file, so if the user opens the project again, the layer-"
"related settings will be there again. The value for a given setting is "
"retrieved using the :meth:`customProperty() "
"<qgis.core.QgsMapLayer.customProperty>` method, and can be set using the "
":meth:`setCustomProperty() <qgis.core.QgsMapLayer.setCustomProperty>` one."
msgstr "**instellingen voor kaartlagen** --- deze instellingen zijn gerelateerd aan een bepaalde instance van een kaartlaag in een project. Zij zijn *niet* verbonden met de onderliggende gegevensbron van een laag, dus als u twee instances voor kaartlagen maakt uit één shapefile, zullen zij de instellingen niet delen. De instellingen worden opgeslagen in het projectbestand, dus als de gebruiker het project opnieuw opent, zijn de aan de laag gerelateerde instellingen weer aanwezig. De waarde voor een opgegegevn instelling wordt opgehaald met behulp van de methode :meth:`customProperty() <qgis.core.QgsMapLayer.customProperty>`, en kan worden ingesteld met behulp van de methode :meth:`setCustomProperty() <qgis.core.QgsMapLayer.setCustomProperty>`."

#~ msgid "We can make difference between several types of settings:"
#~ msgstr ""

#~ msgid ""
#~ "**global settings** --- they are bound to the user at particular machine. "
#~ "QGIS itself stores a lot of global settings, for example, main window size "
#~ "or default snapping tolerance. This functionality is provided directly by Qt"
#~ " framework by the means of :class:`QSettings` class. By default, this class "
#~ "stores settings in system's \"native\" way of storing settings, that is --- "
#~ "registry (on Windows), .plist file (on macOS) or .ini file (on Unix). The "
#~ "`QSettings documentation <http://doc.qt.io/qt-4.8/qsettings.html>`_ is "
#~ "comprehensive, so we will provide just a simple example"
#~ msgstr ""

#~ msgid ""
#~ "The second parameter of the :func:`value()` method is optional and specifies"
#~ " the default value if there is no previous value set for the passed setting "
#~ "name."
#~ msgstr ""

#~ msgid ""
#~ "**project settings** --- vary between different projects and therefore they "
#~ "are connected with a project file. Map canvas background color or "
#~ "destination coordinate reference system (CRS) are examples --- white "
#~ "background and WGS84 might be suitable for one project, while yellow "
#~ "background and UTM projection are better for another one. An example of "
#~ "usage follows"
#~ msgstr ""

#~ msgid ""
#~ "As you can see, the :func:`writeEntry` method is used for all data types, "
#~ "but several methods exist for reading the setting value back, and the "
#~ "corresponding one has to be selected for each data type."
#~ msgstr ""

#~ msgid ""
#~ "**map layer settings** --- these settings are related to a particular "
#~ "instance of a map layer with a project. They are *not* connected with "
#~ "underlying data source of a layer, so if you create two map layer instances "
#~ "of one shapefile, they will not share the settings. The settings are stored "
#~ "in project file, so if the user opens the project again, the layer-related "
#~ "settings will be there again. This functionality has been added in QGIS "
#~ "v1.4. The API is similar to QSettings --- it takes and returns QVariant "
#~ "instances"
#~ msgstr ""
