# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Dick Groskamp, 2015-2017,2019
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-11 14:48+0200\n"
"PO-Revision-Date: 2019-08-16 10:56+0000\n"
"Last-Translator: Dick Groskamp\n"
"Language-Team: Dutch (http://www.transifex.com/qgis/qgis-documentation/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:11
msgid "Map Rendering and Printing"
msgstr "Kaart renderen en afdrukken"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:13
msgid "The code snippets on this page needs the following imports:"
msgstr "De codesnippers op deze pagina hebben de volgende import nodig:"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:22
msgid ""
"There are generally two approaches when input data should be rendered as a "
"map: either do it quick way using `QgsMapRendererJob` or produce more fine-"
"tuned output by composing the map with the :class:`QgsLayout "
"<qgis.core.QgsLayout>` class."
msgstr "Er zijn over het algemeen twee benaderingen wanneer ingevoerde gegevens zouden moeten worden gerenderd als een kaart: ofwel doe het op de snelle manier met behulp van `QgsMapRendererJob` of produceer een meer fijn afgestemde uitvoer door de kaart samen te stellen met behulp van de klasse :class:`QgsLayout <qgis.core.QgsLayout>`."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:29
msgid "Simple Rendering"
msgstr "Eenvoudig renderen"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:31
msgid ""
"The rendering is done creating a :class:`QgsMapSettings "
"<qgis.core.QgsMapSettings>` object to define the rendering options, and then"
" constructing a :class:`QgsMapRendererJob <qgis.core.QgsMapRendererJob>` "
"with those options. The latter is then used to create the resulting image."
msgstr "Het renderen wordt gedaan door een object :class:`QgsMapSettings <qgis.core.QgsMapSettings>` te maken om de opties voor renderen te definiëren, en dan een :class:`QgsMapRendererJob <qgis.core.QgsMapRendererJob>` te construeren met deze opties. het laatste wordt dan gebruikt om de resulterende afbeelding te maken."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:35
msgid "Here's an example:"
msgstr "Hier is een voorbeeld:"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:63
msgid "Rendering layers with different CRS"
msgstr "Lagen met een verschillend CRS renderen"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:65
msgid ""
"If you have more than one layer and they have a different CRS, the simple "
"example above will probably not work: to get the right values from the "
"extent calculations you have to explicitly set the destination CRS"
msgstr "Als u meer dan één laag hebt en zij hebben een verschillend CRS, zal het eenvoudige voorbeeld hierboven niet werken: om de juiste waarden uit de berekeningen van het bereik te krijgen dient u expliciet het doel-CRS in te stellen."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:77
msgid "Output using print layout"
msgstr "Uitvoer door Afdruklay-out te gebruiken"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:79
msgid ""
"Print layout is a very handy tool if you would like to do a more "
"sophisticated output than the simple rendering shown above. It is possible "
"to create complex map layouts consisting of map views, labels, legend, "
"tables and other elements that are usually present on paper maps. The "
"layouts can be then exported to PDF, raster images or directly printed on a "
"printer."
msgstr "Afdruklay-out is een zeer handig gereedschap als u een uitgebreidere uitvoer wilt dan de eenvoudige rendering van die welke hierboven is weergegeven. Het is mogelijk complexe lay-outs voor kaarten te maken, bestaande uit weergaven van kaarten, labels, legenda, tabellen en andere elementen die gewoonlijk aanwezig zijn op papieren kaarten. De lay-outs kunnen dan worden geëxporteerd naar PDF, rasterafbeeldingen of direct worden afgedrukt op een printer."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:85
msgid ""
"The layout consists of a bunch of classes. They all belong to the core "
"library. QGIS application has a convenient GUI for placement of the "
"elements, though it is not available in the GUI library. If you are not "
"familiar with `Qt Graphics View framework "
"<http://doc.qt.io/qt-5/graphicsview.html>`_, then you are encouraged to "
"check the documentation now, because the layout is based on it."
msgstr "De afdruklay-out bestaat uit een aantal klassen. Zij behoren allemaal tot de bron-bibliotheek. De toepassing QGIS heeft een handige GUI voor het plaatsen van de elementen, hoewel die niet beschikbaar is in de bibliotheek van de GUI. Als u niet bekend bent met het `framework Qt Graphics View <http://doc.qt.io/qt-5/graphicsview.html>`_, dan wordt u aangeraden nu de documentatie te raadplegen, omdat afdruklay-out daarop is gebaseerd."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:92
msgid ""
"The central class of the layout is the :class:`QgsLayout "
"<qgis.core.QgsLayout>` class, which is derived from the Qt `QGraphicsScene "
"<https://doc.qt.io/qt-5/qgraphicsscene.html>`_ class. Let us create an "
"instance of it:"
msgstr "De centrale klasse van de afdruklay-out is de klasse :class:`QgsLayout <qgis.core.QgsLayout>` die is afgeleid van de klasse voor Qt `QGraphicsScene <https://doc.qt.io/qt-5/qgraphicsscene.html>`_. Laten we er een instantie van maken:"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:102
msgid ""
"Now we can add various elements (map, label, ...) to the layout. All these "
"objects are represented by classes that inherit from the base "
":class:`QgsLayoutItem <qgis.core.QgsLayoutItem>` class."
msgstr "Nu kunnen we verschillende elementen (kaart, label, …) toevoegen aan de lay-out. Al deze objecten worden weergegeven door klassen die erven van de basisklasse :class:`QgsLayoutItem <qgis.core.QgsLayoutItem>`."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:105
msgid ""
"Here's a description of some of the main layout items that can be added to a"
" layout."
msgstr "Hier is een beschrijving van enkele van de belangrijkste items voor lay-out die aan een lay-out kunnen worden toegevoegd."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:107
msgid ""
"map --- this item tells the libraries where to put the map itself. Here we "
"create a map and stretch it over the whole paper size"
msgstr "kaart --- dit item vertelt de bibliotheken waar de kaart zelf moet worden geplaatst. Hier maken we ene kaart en spreiden die over de gehele grootte van het papier"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:115
msgid ""
"label --- allows displaying labels. It is possible to modify its font, "
"color, alignment and margin"
msgstr "label --- maakt het weergeven van labels mogelijk. Het is mogelijk het lettertype, de kleur, de uitlijning en marge aan te passen"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:125
msgid "legend"
msgstr "legenda"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:133
msgid "scale bar"
msgstr "schaalbalk"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:143
msgid "arrow"
msgstr "pijl"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:144
msgid "picture"
msgstr "afbeelding"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:145
msgid "basic shape"
msgstr "basisvorm"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:146
msgid "nodes based shape"
msgstr "op knopen gebaseerde vorm"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:170
msgid "table"
msgstr "tabel"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:172
msgid "Once an item is added to the layout, it can be moved and resized:"
msgstr "Als een item eenmaal is toegevoegd aan de lay-out kan het worden verplaatst en de grootte worden gewijzigd:"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:179
msgid ""
"A frame is drawn around each item by default. You can remove it as follows:"
msgstr "Standaard wordt een kader rondom elk item getekend. U kunt dat als volgt verwijderen:"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:186
msgid ""
"Besides creating the layout items by hand, QGIS has support for layout "
"templates which are essentially compositions with all their items saved to a"
" .qpt file (with XML syntax)."
msgstr "Naast het handmatig maken van items voor afdruklay-out, heeft QGIS ondersteuning voor sjablonen van afdruklay-out wat in essentie lay-outs zijn met al hun items, opgeslagen als een bestand .qpt (met syntaxis XML)."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:190
msgid ""
"Once the composition is ready (the layout items have been created and added "
"to the composition), we can proceed to produce a raster and/or vector "
"output."
msgstr "Als de lay-out eenmaal gereed is (de items van afdruklay-out zijn gemaakt en toegevoegd aan de lay-out), kunnen we doorgaan en een raster- en/of vector-uitvoer produceren."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:196
msgid "Exporting the layout"
msgstr "Lay-out exporteren"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:198
msgid ""
"To export a layout, the :class:`QgsLayoutExporter "
"<qgis.core.QgsLayoutExporter>` class must be used."
msgstr "De klasse :class:`QgsLayoutExporter <qgis.core.QgsLayoutExporter>` moet worden gebruikt om een lay-out te exporteren."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:208
msgid ""
"Use the :meth:`exportToImage() <qgis.core.QgsLayoutExporter.exportToImage>` "
"in case you want to export to an image instead of a PDF file."
msgstr "Gebruik :meth:`exportToImage() <qgis.core.QgsLayoutExporter.exportToImage>` in het geval dat u wilt exporteren naar een afbeelding in plaats van een bestand PDF."

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:212
msgid "Exporting a layout atlas"
msgstr "Een afdrukatlas exporteren"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:214
msgid ""
"If you want to export all pages from a layout that has the atlas option "
"configured and enabled, you need to use the :meth:`atlas() "
"<qgis.core.QgsPrintLayout.atlas>` method in the exporter "
"(:class:`QgsLayoutExporter <qgis.core.QgsLayoutExporter>`) with small "
"adjustments. In the following example, the pages are exported to PNG images:"
msgstr "Als u alle pagina's wilt exporteren van een lay-out die de optie Atlas heeft geconfigureerd en ingeschakeld, dient u de methode :meth:`atlas() <qgis.core.QgsPrintLayout.atlas>` te gebruiken voor het exporteren (:class:`QgsLayoutExporter <qgis.core.QgsLayoutExporter>`) met enkele kleine aanpassingen. In het volgende voorbeeld worden de pagina's geëxporteerd naar afbeeldingen PNG:"

#: ../../source/docs/pyqgis_developer_cookbook/composer.rst:224
msgid ""
"Notice that the outputs will be saved in the base path folder, using the "
"output filename expression configured on atlas."
msgstr "Onthoud dat de uitvoer zal worden opgeslagen in de map voor het basispad, met de expressie voor de bestandsnaam voor de uitvoer die werd geconfigureerd in Atlas."

#~ msgid ""
#~ "There are generally two approaches when input data should be rendered as a "
#~ "map: either do it quick way using :class:`QgsMapRenderer` or produce more "
#~ "fine-tuned output by composing the map with :class:`QgsComposition` class "
#~ "and friends."
#~ msgstr ""

#~ msgid ""
#~ "Render some layers using :class:`QgsMapRenderer` --- create destination "
#~ "paint device (``QImage``, ``QPainter`` etc.), set up layer set, extent, "
#~ "output size and do the rendering"
#~ msgstr ""

#~ msgid ""
#~ "If you have more than one layer and they have a different CRS, the simple "
#~ "example above will probably not work: to get the right values from the "
#~ "extent calculations you have to explicitly set the destination CRS and "
#~ "enable OTF reprojection as in the example below (only the renderer "
#~ "configuration part is reported)"
#~ msgstr ""

#~ msgid "Output using Map Composer"
#~ msgstr ""

#~ msgid ""
#~ "Map composer is a very handy tool if you would like to do a more "
#~ "sophisticated output than the simple rendering shown above. Using the "
#~ "composer it is possible to create complex map layouts consisting of map "
#~ "views, labels, legend, tables and other elements that are usually present on"
#~ " paper maps. The layouts can be then exported to PDF, raster images or "
#~ "directly printed on a printer."
#~ msgstr ""

#~ msgid ""
#~ "The composer consists of a bunch of classes. They all belong to the core "
#~ "library. QGIS application has a convenient GUI for placement of the "
#~ "elements, though it is not available in the GUI library. If you are not "
#~ "familiar with `Qt Graphics View framework "
#~ "<http://doc.qt.io/qt-4.8/qgraphicsview.html>`_, then you are encouraged to "
#~ "check the documentation now, because the composer is based on it. Also check"
#~ " the `Python documentation of the implementation of QGraphicView "
#~ "<http://pyqt.sourceforge.net/Docs/PyQt4/qgraphicsview.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "The central class of the composer is :class:`QgsComposition` which is "
#~ "derived from :class:`QGraphicsScene`. Let us create one"
#~ msgstr ""

#~ msgid ""
#~ "Note that the composition takes an instance of :class:`QgsMapRenderer`. In "
#~ "the code we expect we are running within QGIS application and thus use the "
#~ "map renderer from map canvas. The composition uses various parameters from "
#~ "the map renderer, most importantly the default set of map layers and the "
#~ "current extent. When using composer in a standalone application, you can "
#~ "create your own map renderer instance the same way as shown in the section "
#~ "above and pass it to the composition."
#~ msgstr ""

#~ msgid ""
#~ "It is possible to add various elements (map, label, ...) to the composition "
#~ "--- these elements have to be descendants of :class:`QgsComposerItem` class."
#~ " Currently supported items are:"
#~ msgstr ""

#~ msgid ""
#~ "By default the newly created composer items have zero position (top left "
#~ "corner of the page) and zero size. The position and size are always measured"
#~ " in millimeters"
#~ msgstr ""

#~ msgid "A frame is drawn around each item by default. How to remove the frame"
#~ msgstr ""

#~ msgid ""
#~ "Besides creating the composer items by hand, QGIS has support for composer "
#~ "templates which are essentially compositions with all their items saved to a"
#~ " .qpt file (with XML syntax). Unfortunately this functionality is not yet "
#~ "available in the API."
#~ msgstr ""

#~ msgid ""
#~ "Once the composition is ready (the composer items have been created and "
#~ "added to the composition), we can proceed to produce a raster and/or vector "
#~ "output."
#~ msgstr ""

#~ msgid ""
#~ "The default output settings for composition are page size A4 and resolution "
#~ "300 DPI. You can change them if necessary. The paper size is specified in "
#~ "millimeters"
#~ msgstr ""

#~ msgid "Output to a raster image"
#~ msgstr ""

#~ msgid ""
#~ "The following code fragment shows how to render a composition to a raster "
#~ "image"
#~ msgstr ""

#~ msgid "Output to PDF"
#~ msgstr ""

#~ msgid "The following code fragment renders a composition to a PDF file"
#~ msgstr ""

#~ msgid ""
#~ "The central class of the layout is the :class:`QgsLayout "
#~ "<qgis.core.QgsLayout>` class, which is derived from the Qt "
#~ ":class:`QGraphicsScene` class. Let us create an instance of it:"
#~ msgstr ""
