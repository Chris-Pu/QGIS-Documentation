# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGISDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGISDoc 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-14 23:00+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/pyqgis_developer_cookbook/settings.rst:1
msgid ""
"The code snippets on this page needs the following imports if you're "
"outside the pyqgis console:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:17
msgid "Reading And Storing Settings"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:19
msgid "|outofdate|"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:21
msgid ""
"Many times it is useful for a plugin to save some variables so that the "
"user does not have to enter or select them again next time the plugin is "
"run."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:24
msgid ""
"These variables can be saved and retrieved with help of Qt and QGIS API. "
"For each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:29
msgid "We can differentiate between several types of settings:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:33
msgid ""
"**global settings** --- they are bound to the user at a particular "
"machine. QGIS itself stores a lot of global settings, for example, main "
"window size or default snapping tolerance. Settings are handled using the"
" :class:`QgsSettings <qgis.core.QgsSettings>` class, through for example "
"the :meth:`setValue() <qgis.core.QgsSettings.setValue>` and "
":meth:`value() <qgis.core.QgsSettings.value>` methods."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:40
msgid "Here you can see an example of how these methods are used."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:61
msgid ""
"The second parameter of the :meth:`value() <qgis.core.QgsSettings.value>`"
" method is optional and specifies the default value that is returned if "
"there is no previous value set for the passed setting name."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:67
msgid ""
"**project settings** --- vary between different projects and therefore "
"they are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:73
msgid "An example of usage follows."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:103
msgid ""
"As you can see, the :meth:`writeEntry() "
"<qgis.core.QgsProject.writeEntry>` method is used for all data types, but"
" several methods exist for reading the setting value back, and the "
"corresponding one has to be selected for each data type."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/settings.rst:110
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer "
"instances of one shapefile, they will not share the settings. The "
"settings are stored inside the project file, so if the user opens the "
"project again, the layer-related settings will be there again. The value "
"for a given setting is retrieved using the :meth:`customProperty() "
"<qgis.core.QgsMapLayer.customProperty>` method, and can be set using the "
":meth:`setCustomProperty() <qgis.core.QgsMapLayer.setCustomProperty>` "
"one."
msgstr ""

