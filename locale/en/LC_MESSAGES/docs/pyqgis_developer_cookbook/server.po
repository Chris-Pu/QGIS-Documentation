# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002-now, QGIS project
# This file is distributed under the same license as the QGISDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGISDoc 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-14 23:00+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../docs/pyqgis_developer_cookbook/server.rst:7
msgid "QGIS Server Python Plugins"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:9
msgid "|outofdate|"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:14
msgid "Python plugins can also run on QGIS Server (see :ref:`label_qgisserver`):"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:16
msgid ""
"By using the *server interface* (:class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>`) a Python plugin running on the server "
"can alter the behavior of existing core services (**WMS**, **WFS** etc.)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:18
msgid ""
"With the *server filter interface* (:class:`QgsServerFilter "
"<qgis.server.QgsServerFilter>`) you can change the input parameters, "
"change the generated output or even provide new services."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:20
msgid ""
"With the *access control interface* (:class:`QgsAccessControlFilter "
"<qgis.server.QgsAccessControlFilter>`) you can apply some access "
"restriction per requests."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:25
msgid "Server Filter Plugins architecture"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:27
msgid ""
"Server python plugins are loaded once when the FCGI application starts. "
"They register one or more :class:`QgsServerFilter "
"<qgis.server.QgsServerFilter>` (from this point, you might find useful a "
"quick look to the :api:`server plugins API docs <group__server.html>`). "
"Each filter should implement at least one of three callbacks:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:33
#: ../../docs/pyqgis_developer_cookbook/server.rst:199
msgid ":meth:`requestReady() <qgis.server.QgsServerFilter.requestReady>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:34
#: ../../docs/pyqgis_developer_cookbook/server.rst:200
msgid ":meth:`responseComplete() <qgis.server.QgsServerFilter.responseComplete>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:35
#: ../../docs/pyqgis_developer_cookbook/server.rst:201
msgid ":meth:`sendResponse() <qgis.server.QgsServerFilter.sendResponse>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:37
msgid ""
"All filters have access to the request/response object "
"(:class:`QgsRequestHandler <qgis.server.QgsRequestHandler>`) and can "
"manipulate all its properties (input/output) and raise exceptions (while "
"in a quite particular way as we’ll see below)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:41
msgid ""
"Here is a pseudo code showing a typical server session and when the "
"filter’s callbacks are called:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:57
msgid "Get the incoming request"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:44
msgid "create GET/POST/SOAP request handler"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:45
msgid ""
"pass request to an instance of :class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>`"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:46
msgid ""
"call plugins :meth:`requestReady "
"<qgis.server.QgsServerFilter.requestReady>` filters"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:53
msgid "if there is not a response"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:52
msgid "if SERVICE is WMS/WFS/WCS"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:52
msgid "create WMS/WFS/WCS server"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:50
msgid ""
"call server’s :meth:`executeRequest "
"<qgis.server.QgsService.executeRequest>` and possibly call "
":meth:`sendResponse <qgis.server.QgsServerFilter.sendResponse>` plugin "
"filters when streaming output or store the byte stream output and content"
" type in the request handler"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:54
msgid ""
"call plugins :meth:`responseComplete "
"<qgis.server.QgsServerFilter.responseComplete>` filters"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:55
msgid ""
"call plugins :meth:`sendResponse "
"<qgis.server.QgsServerFilter.sendResponse>` filters"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:56
msgid "request handler output the response"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:59
msgid "The following paragraphs describe the available callbacks in details."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:62
msgid "requestReady"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:64
msgid ""
"This is called when the request is ready: incoming URL and data have been"
" parsed and before entering the core services (WMS, WFS etc.) switch, "
"this is the point where you can manipulate the input and perform actions "
"like:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:68
msgid "authentication/authorization"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:69
msgid "redirects"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:70
msgid "add/remove certain parameters (typenames for example)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:71
msgid "raise exceptions"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:73
msgid ""
"You could even substitute a core service completely by changing "
"**SERVICE** parameter and hence bypassing the core service completely "
"(not that this make much sense though)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:79
msgid "sendResponse"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:82
msgid ""
"This is called whenever output is sent to **FCGI** ``stdout`` (and from "
"there, to the client), this is normally done after core services have "
"finished their process and after responseComplete hook was called, but in"
" a few cases XML can become so huge that a streaming XML implementation "
"was needed (WFS GetFeature is one of them), in this case, "
":meth:`sendResponse <qgis.server.QgsServerFilter.sendResponse>` is called"
" multiple times before the response is complete (and before "
":meth:`responseComplete <qgis.server.QgsServerFilter.responseComplete>` "
"is called). The obvious consequence is that :meth:`sendResponse "
"<qgis.server.QgsServerFilter.sendResponse>` is normally called once but "
"might be exceptionally called multiple times and in that case (and only "
"in that case) it is also called before :meth:`responseComplete "
"<qgis.server.QgsServerFilter.responseComplete>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:96
msgid ""
":meth:`sendResponse <qgis.server.QgsServerFilter.sendResponse>` is the "
"best place for direct manipulation of core service’s output and while "
":meth:`responseComplete <qgis.server.QgsServerFilter.responseComplete>` "
"is typically also an option, :meth:`sendResponse "
"<qgis.server.QgsServerFilter.sendResponse>` is the only viable option in "
"case of streaming services."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:104
msgid "responseComplete"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:106
msgid ""
"This is called once when core services (if hit) finish their process and "
"the request is ready to be sent to the client. As discussed above, this "
"is normally called before :meth:`sendResponse "
"<qgis.server.QgsServerFilter.sendResponse>` except for streaming services"
" (or other plugin filters) that might have called :meth:`sendResponse "
"<qgis.server.QgsServerFilter.sendResponse>` earlier."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:113
msgid ""
":meth:`responseComplete <qgis.server.QgsServerFilter.responseComplete>` "
"is the ideal place to provide new services implementation (WPS or custom "
"services) and to perform direct manipulation of the output coming from "
"core services (for example to add a watermark upon a WMS image)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:119
msgid "Raising exception from a plugin"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:121
msgid ""
"Some work has still to be done on this topic: the current implementation "
"can distinguish between handled and unhandled exceptions by setting a "
":class:`QgsRequestHandler <qgis.server.QgsRequestHandler>` property to an"
" instance of QgsMapServiceException, this way the main C++ code can catch"
" handled python exceptions and ignore unhandled exceptions (or better: "
"log them)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:128
msgid ""
"This approach basically works but it is not very \"pythonic\": a better "
"approach would be to raise exceptions from python code and see them "
"bubbling up into C++ loop for being handled there."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:136
msgid "Writing a server plugin"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:138
msgid ""
"A server plugin is a standard QGIS Python plugin as described in "
":ref:`developing_plugins`, that just provides an additional (or "
"alternative) interface: a typical QGIS desktop plugin has access to QGIS "
"application through the :class:`QgisInterface <qgis.gui.QgisInterface>` "
"instance, a server plugin has also access to a :class:`QgsServerInterface"
" <qgis.server.QgsServerInterface>`."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:145
msgid ""
"To tell QGIS Server that a plugin has a server interface, a special "
"metadata entry is needed (in `metadata.txt`) ::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:150
msgid ""
"The example plugin discussed here (with many more example filters) is "
"available on github: `QGIS HelloServer Example Plugin "
"<https://github.com/elpaso/qgis-helloserver>`_. You could also find more "
"examples at https://github.com/elpaso/qgis3-server-"
"vagrant/tree/master/resources/web/plugins or browsing the `QGIS plugins "
"repository <https://plugins.qgis.org/plugins/server>`_."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:156
#: ../../docs/pyqgis_developer_cookbook/server.rst:368
msgid "Plugin files"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:158
msgid "Here's the directory structure of our example server plugin"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:171
#: ../../docs/pyqgis_developer_cookbook/server.rst:380
msgid "__init__.py"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:172
msgid ""
"This file is required by Python's import system. Also, QGIS Server "
"requires that this file contains a :func:`serverClassFactory()` function,"
" which is called when the plugin gets loaded into QGIS Server when the "
"server starts. It receives reference to instance of "
":class:`QgsServerInterface <qgis.server.QgsServerInterface>` and must "
"return instance of your plugin's class. This is how the example plugin "
":file:`__init__.py` looks like::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:188
msgid "HelloServer.py"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:190
msgid ""
"This is where the magic happens and this is how magic looks like: (e.g. "
":file:`HelloServer.py`)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:194
msgid ""
"A server plugin typically consists in one or more callbacks packed into "
"objects called QgsServerFilter."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:196
msgid ""
"Each :class:`QgsServerFilter <qgis.server.QgsServerFilter>` implements "
"one or more of the following callbacks:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:203
msgid ""
"The following example implements a minimal filter which prints "
"*HelloServer!* in case the **SERVICE** parameter equals to “HELLO”::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:224
msgid ""
"The filters must be registered into the **serverIface** as in the "
"following example::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:232
msgid ""
"The second parameter of :meth:`registerFilter "
"<qgis.server.QgsServerInterface.registerFilter>` sets a priority which "
"defines the order for the callbacks with the same name (the lower "
"priority is invoked first)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:237
msgid ""
"By using the three callbacks, plugins can manipulate the input and/or the"
" output of the server in many different ways. In every moment, the plugin"
" instance has access to the :class:`QgsRequestHandler "
"<qgis.server.QgsRequestHandler>` through the :class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>`. The :class:`QgsRequestHandler "
"<qgis.server.QgsRequestHandler>` class has plenty of methods that can be "
"used to alter the input parameters before entering the core processing of"
" the server (by using :func:`requestReady`) or after the request has been"
" processed by the core services (by using :func:`sendResponse`)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:247
msgid "The following examples cover some common use cases:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:250
msgid "Modifying the input"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:252
msgid ""
"The example plugin contains a test example that changes input parameters "
"coming from the query string, in this example a new parameter is injected"
" into the (already parsed) ``parameterMap``, this parameter is then "
"visible by core services (WMS etc.), at the end of core services "
"processing we check that the parameter is still there::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:279
msgid "This is an extract of what you see in the log file:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:301
msgid ""
"On the highlighted line the “SUCCESS” string indicates that the plugin "
"passed the test."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:303
msgid ""
"The same technique can be exploited to use a custom service instead of a "
"core one: you could for example skip a **WFS** **SERVICE** request or any"
" other core request just by changing the **SERVICE** parameter to "
"something different and the core service will be skipped, then you can "
"inject your custom results into the output and send them to the client "
"(this is explained here below)."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:311
msgid "Modifying or replacing the output"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:313
msgid ""
"The watermark filter example shows how to replace the WMS output with a "
"new image obtained by adding a watermark image on the top of the WMS "
"image generated by the WMS core service:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:356
msgid ""
"In this example the **SERVICE** parameter value is checked and if the "
"incoming request is a **WMS** **GETMAP** and no exceptions have been set "
"by a previously executed plugin or by the core service (WMS in this "
"case), the WMS generated image is retrieved from the output buffer and "
"the watermark image is added. The final step is to clear the output "
"buffer and replace it with the newly generated image. Please note that in"
" a real-world situation we should also check for the requested image type"
" instead of returning PNG in any case."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:365
msgid "Access control plugin"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:370
msgid "Here's the directory structure of our example server plugin::"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:382
msgid ""
"This file is required by Python's import system. As for all QGIS server "
"plugins, this file contains a :func:`serverClassFactory()` function, "
"which is called when the plugin gets loaded into QGIS Server at startup. "
"It receives a reference to an instance of :class:`QgsServerInterface "
"<qgis.server.QgsServerInterface>` and must return an instance of your "
"plugin's class. This is how the example plugin :file:`__init__.py` looks "
"like:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:399
msgid "AccessControl.py"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:431
msgid "This example gives a full access for everybody."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:433
msgid "It's the role of the plugin to know who is logged on."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:435
msgid ""
"On all those methods we have the layer on argument to be able to "
"customise the restriction per layer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:440
msgid "layerFilterExpression"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:442
msgid "Used to add an Expression to limit the results, e.g.:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:449
#: ../../docs/pyqgis_developer_cookbook/server.rst:462
msgid "To limit on feature where the attribute role is equals to \"user\"."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:453
msgid "layerFilterSubsetString"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:455
msgid ""
"Same than the previous but use the ``SubsetString`` (executed in the "
"database)"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:466
msgid "layerPermissions"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:468
msgid "Limit the access to the layer."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:470
msgid ""
"Return an object of type :meth:`LayerPermissions "
"<qgis.server.QgsAccessControlFilter.layerPermissions>`, which has the "
"properties:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:473
msgid ""
":attr:`canRead "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canRead>` to see it "
"in the ``GetCapabilities`` and have read access."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:475
msgid ""
":attr:`canInsert "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canInsert>` to be "
"able to insert a new feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:477
msgid ""
":attr:`canUpdate "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canUpdate>` to be "
"able to update a feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:479
msgid ""
":attr:`canDelete "
"<qgis.server.QgsAccessControlFilter.LayerPermissions.canDelete>` to be "
"able to delete a feature."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:482
#: ../../docs/pyqgis_developer_cookbook/server.rst:502
#: ../../docs/pyqgis_developer_cookbook/server.rst:519
msgid "Example:"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:492
msgid "To limit everything on read only access."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:496
msgid "authorizedLayerAttributes"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:498
msgid "Used to limit the visibility of a specific subset of attribute."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:500
msgid "The argument attribute return the current set of visible attributes."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:509
msgid "To hide the 'role' attribute."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:513
msgid "allowToEdit"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:515
msgid "This is used to limit the editing on a subset of features."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:517
msgid "It is used in the ``WFS-Transaction`` protocol."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:526
msgid ""
"To be able to edit only feature that has the attribute role with the "
"value user."
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:531
msgid "cacheKey"
msgstr ""

#: ../../docs/pyqgis_developer_cookbook/server.rst:533
msgid ""
"QGIS server maintain a cache of the capabilities then to have a cache per"
" role you can return the role in this method. Or return ``None`` to "
"completely disable the cache."
msgstr ""

