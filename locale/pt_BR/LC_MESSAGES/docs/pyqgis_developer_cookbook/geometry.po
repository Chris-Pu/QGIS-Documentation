# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, QGIS project
# This file is distributed under the same license as the QGIS Documentation
# Project package.
# 
# Translators:
# Armando Vulcano Junior <vulcano@uol.com.br>, 2015
# Jean Favaretto <jean.favaretto@gmail.com>, 2016
# Leônidas Luiz Volcato Descovi Filho <leonidasfilho2000@yahoo.com.br>, 2014
# Liliana Osako <lilianaso.sig@gmail.com>, 2018
# Narcélio de Sá Pereira Filho <narceliosapereira@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-06 11:48+0100\n"
"PO-Revision-Date: 2019-12-06 11:03+0000\n"
"Last-Translator: Richard Duivenvoorde <richard@duif.net>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/qgis/qgis-documentation/language/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:11
msgid "Geometry Handling"
msgstr "Manipulação Geométrica"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:17
msgid ""
"The code snippets on this page need the following imports if you're outside "
"the pyqgis console:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:31
msgid ""
"Points, linestrings and polygons that represent a spatial feature are "
"commonly referred to as geometries. In QGIS they are represented with the "
":class:`QgsGeometry <qgis.core.QgsGeometry>` class."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:35
msgid ""
"Sometimes one geometry is actually a collection of simple (single-part) "
"geometries. Such a geometry is called a multi-part geometry. If it contains "
"just one type of simple geometry, we call it multi-point, multi-linestring "
"or multi-polygon. For example, a country consisting of multiple islands can "
"be represented as a multi-polygon."
msgstr "Às vezes, uma geometria é realmente uma coleção dex simples geometrias (single-part). Tal geometria é chamada de geometria de várias partes. Se ele contém apenas um tipo de simples geometria, podemos chamar de multi-ponto, multi-cadeia linear ou multi-polígono. Por exemplo, um país que consiste de múltiplas ilhas pode ser representado como um sistema multi-polígono."

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:41
msgid ""
"The coordinates of geometries can be in any coordinate reference system "
"(CRS). When fetching features from a layer, associated geometries will have "
"coordinates in CRS of the layer."
msgstr "As coordenadas de geometrias podem estar em qualquer sistema de referência de coordenadas (SRC). Ao buscar feições a partir de uma camada, geometrias associadas terão coordenadas no SRC da camada."

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:45
msgid ""
"Description and specifications of all possible geometries construction and "
"relationships are available in the `OGC Simple Feature Access Standards "
"<https://www.opengeospatial.org/standards/sfa>`_ for advanced details."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:52
msgid "Geometry Construction"
msgstr "Construção de Geométria"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:54
msgid "PyQGIS provides several options for creating a geometry:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:56
msgid "from coordinates"
msgstr "a partir das coordenadas"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:75
msgid ""
"Coordinates are given using :class:`QgsPoint <qgis.core.QgsPoint>` class or "
":class:`QgsPointXY <qgis.core.QgsPointXY>` class. The difference between "
"these classes is that :class:`QgsPoint <qgis.core.QgsPoint>` supports M and "
"Z dimensions."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:79
msgid "A Polyline (Linestring) is represented by a list of points."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:81
msgid ""
"A Polygon is represented by a list of linear rings (i.e. closed "
"linestrings). The first ring is the outer ring (boundary), optional "
"subsequent rings are holes in the polygon. Note that unlike some programs, "
"QGIS will close the ring for you so there is no need to duplicate the first "
"point as the last."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:87
msgid ""
"Multi-part geometries go one level further: multi-point is a list of points,"
" multi-linestring is a list of linestrings and multi-polygon is a list of "
"polygons."
msgstr "Geometrias multi-parte passam para um nível maior: multi-ponto é uma lista de pontos, multi-cadeia linear é uma lista de cadeias lineares e multi-polígono é uma lista de polígonos."

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:91
msgid "from well-known text (WKT)"
msgstr "a partir de textos conhecidos (WKT)"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:103
msgid "from well-known binary (WKB)"
msgstr "a partir de binários conhecidos (WKB)"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:122
msgid "Access to Geometry"
msgstr "Acesso a Geometria"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:124
msgid ""
"First, you should find out the geometry type. The :meth:`wkbType() "
"<qgis.core.QgsGeometry.wkbType>` method is the one to use. It returns a "
"value from the :class:`QgsWkbTypes.Type <qgis.core.QgsWkbTypes>` "
"enumeration."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:146
msgid ""
"As an alternative, one can use the :meth:`type() "
"<qgis.core.QgsGeometry.type>` method which returns a value from the "
":class:`QgsWkbTypes.GeometryType <qgis.core.QgsWkbTypes>` enumeration."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:150
msgid ""
"You can use the :meth:`displayString() "
"<qgis.core.QgsWkbTypes.displayString>` function to get a human readable "
"geometry type."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:168
msgid ""
"There is also a helper function :meth:`isMultipart() "
"<qgis.core.QgsGeometry.isMultipart>` to find out whether a geometry is "
"multipart or not."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:171
msgid ""
"To extract information from a geometry there are accessor functions for "
"every vector type. Here's an example on how to use these accessors:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:191
msgid ""
"The tuples (x,y) are not real tuples, they are :class:`QgsPoint "
"<qgis.core.QgsPoint>` objects, the values are accessible with :meth:`x() "
"<qgis.core.QgsPoint.x>` and :meth:`y() <qgis.core.QgsPoint.y>` methods."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:195
msgid ""
"For multipart geometries there are similar accessor functions: "
":meth:`asMultiPoint() <qgis.core.QgsGeometry.asMultiPoint>`, "
":meth:`asMultiPolyline() <qgis.core.QgsGeometry.asMultiPolyline>` and "
":meth:`asMultiPolygon() <qgis.core.QgsGeometry.asMultiPolygon>`."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:202
msgid "Geometry Predicates and Operations"
msgstr "Operações e Predicados Geométricos"

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:204
msgid ""
"QGIS uses GEOS library for advanced geometry operations such as geometry "
"predicates (:meth:`contains() <qgis.core.QgsGeometry.contains>`, "
":meth:`intersects() <qgis.core.QgsGeometry.intersects>`, …) and set "
"operations (:meth:`combine() <qgis.core.QgsGeometry.combine>`, "
":meth:`difference() <qgis.core.QgsGeometry.difference>`, …). It can also "
"compute geometric properties of geometries, such as area (in the case of "
"polygons) or lengths (for polygons and lines)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:210
msgid ""
"Let's see an example that combines iterating over the features in a given "
"layer and performing some geometric computations based on their geometries. "
"The below code will compute and print the area and perimeter of each country"
" in the ``countries`` layer within our tutorial QGIS project."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:215
#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:243
msgid ""
"The following code assumes ``layer`` is a :class:`QgsVectorLayer "
"<qgis.core.QgsVectorLayer>` object that has Polygon feature type."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:234
msgid ""
"Now you have calculated and printed the areas and perimeters of the "
"geometries. You may however quickly notice that the values are strange. That"
" is because areas and perimeters don't take CRS into account when computed "
"using the :meth:`area() <qgis.core.QgsGeometry.area>` and :meth:`length() "
"<qgis.core.QgsGeometry.length>` methods from the :class:`QgsGeometry "
"<qgis.core.QgsGeometry>` class. For a more powerful area and distance "
"calculation, the :class:`QgsDistanceArea <qgis.core.QgsDistanceArea>` class "
"can be used, which can perform ellipsoid based calculations:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:268
msgid ""
"Alternatively, you may want to know the distance and bearing between two "
"points."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:288
msgid ""
"You can find many example of algorithms that are included in QGIS and use "
"these methods to analyze and transform vector data. Here are some links to "
"the code of a few of them."
msgstr "Você pode encontrar muitos exemplo de algoritmos que estão incluídos no QGIS e usar esses métodos para analisar e transformar dados vetoriais. Aqui estão alguns links para o código de alguns deles."

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:292
msgid ""
"Distance and area using the :class:`QgsDistanceArea "
"<qgis.core.QgsDistanceArea>` class: :source:`Distance matrix algorithm "
"<python/plugins/processing/algs/qgis/PointDistance.py>`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/geometry.rst:294
msgid ""
":source:`Lines to polygons algorithm "
"<python/plugins/processing/algs/qgis/LinesToPolygons.py>`"
msgstr ""

#~ msgid ""
#~ "Points, linestrings and polygons that represent a spatial feature are "
#~ "commonly referred to as geometries. In QGIS they are represented with the "
#~ ":class:`QgsGeometry` class. All possible geometry types are nicely shown in "
#~ "`JTS discussion page "
#~ "<http://www.vividsolutions.com/jts/discussion.htm#spatialDataModel>`_."
#~ msgstr ""

#~ msgid "There are several options for creating a geometry:"
#~ msgstr ""

#~ msgid "Coordinates are given using :class:`QgsPoint` class."
#~ msgstr ""

#~ msgid ""
#~ "Polyline (Linestring) is represented by a list of points. Polygon is "
#~ "represented by a list of linear rings (i.e. closed linestrings). First ring "
#~ "is outer ring (boundary), optional subsequent rings are holes in the "
#~ "polygon."
#~ msgstr ""

#~ msgid ""
#~ "First, you should find out geometry type, :func:`wkbType` method is the one "
#~ "to use --- it returns a value from ``QGis.WkbType`` enumeration"
#~ msgstr ""

#~ msgid ""
#~ "As an alternative, one can use :func:`type` method which returns a value "
#~ "from ``QGis.GeometryType`` enumeration. There is also a helper function "
#~ ":func:`isMultipart` to find out whether a geometry is multipart or not."
#~ msgstr ""

#~ msgid ""
#~ "To extract information from geometry there are accessor functions for every "
#~ "vector type. How to use accessors"
#~ msgstr ""

#~ msgid ""
#~ "The tuples (x,y) are not real tuples, they are :class:`QgsPoint` objects, "
#~ "the values are accessible with :func:`x` and :func:`y` methods."
#~ msgstr ""

#~ msgid ""
#~ "For multipart geometries there are similar accessor functions: "
#~ ":func:`asMultiPoint`, :func:`asMultiPolyline`, :func:`asMultiPolygon()`."
#~ msgstr ""

#~ msgid ""
#~ "QGIS uses GEOS library for advanced geometry operations such as geometry "
#~ "predicates (:func:`contains`, :func:`intersects`, ...) and set operations "
#~ "(:func:`union`, :func:`difference`, ...). It can also compute geometric "
#~ "properties of geometries, such as area (in the case of polygons) or lengths "
#~ "(for polygons and lines)"
#~ msgstr ""

#~ msgid ""
#~ "Here you have a small example that combines iterating over the features in a"
#~ " given layer and performing some geometric computations based on their "
#~ "geometries."
#~ msgstr ""

#~ msgid ""
#~ "Areas and perimeters don't take CRS into account when computed using these "
#~ "methods from the :class:`QgsGeometry` class. For a more powerful area and "
#~ "distance calculation, the :class:`QgsDistanceArea` class can be used. If "
#~ "projections are turned off, calculations will be planar, otherwise they'll "
#~ "be done on the ellipsoid."
#~ msgstr ""

#~ msgid "Additional information can be found in following sources:"
#~ msgstr ""

#~ msgid ""
#~ "Geometry transformation: `Reproject algorithm "
#~ "<https://raw.github.com/qgis/QGIS/release-"
#~ "2_18/python/plugins/processing/algs/qgis/ReprojectLayer.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "Distance and area using the :class:`QgsDistanceArea` class: `Distance matrix"
#~ " algorithm <https://raw.github.com/qgis/QGIS/release-"
#~ "2_18/python/plugins/processing/algs/qgis/PointDistance.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "`Multi-part to single-part algorithm <https://raw.github.com/qgis/QGIS"
#~ "/release-"
#~ "2_18/python/plugins/processing/algs/qgis/MultipartToSingleparts.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "First, you should find out the geometry type. The :meth:`wkbType() "
#~ "<qgis.core.QgsGeometry.wkbType>` method is the one to use. It returns a "
#~ "value from the :class:`QgsWkbTypes.Type <qgis.core.QgsWkbTypes>` enumeration"
#~ msgstr ""

#~ msgid ""
#~ "As an alternative, one can use :meth:`wkbType() "
#~ "<qgis.core.QgsGeometry.wkbType>` method which returns a value from "
#~ ":class:`QgsWkbTypes.GeometryType <qgis.core.QgsWkbTypes>` enumeration."
#~ msgstr ""

#~ msgid ""
#~ "You can use the func:`wkbType() <qgis.core.QgsWkbTypes.displayString>` "
#~ "function to get a human readable geometry type."
#~ msgstr ""

#~ msgid ""
#~ "The tuples (x,y) are not real tuples, they are :class:`QgsPoint "
#~ "<qgis.core.QgsPoint>` objects, the values are accessible with :meth:`x() "
#~ "<qgis.core.QgsPoint.x>` () and :meth:`y() <qgis.core.QgsPoint.y>` methods."
#~ msgstr ""

#~ msgid ""
#~ "For multipart geometries there are similar accessor functions: "
#~ ":meth:`asMultiPoint() <qgis.core.QgsGeometry.asMultiPoint>`, "
#~ ":meth:`asMultiPolyline() <qgis.core.QgsGeometry.asMultiPolyline>` and "
#~ ":meth:`asMultiPolygon() <qgis.core.QgsGeometry.asMultiPolygon>`"
#~ msgstr ""

#~ msgid ""
#~ "qgis.core.QgsGeometry.asMultiPoint .. index:: Geometry; Predicates and "
#~ "operations"
#~ msgstr ""

#~ msgid ""
#~ "QGIS uses GEOS library for advanced geometry operations such as geometry "
#~ "predicates (:meth:`contains() <qgis.core.QgsGeometry.contains>`, "
#~ ":meth:`intersects() <qgis.core.QgsGeometry.intersects>`, …) and set "
#~ "operations (:meth:`combine() <qgis.core.QgsGeometry.combine>`, "
#~ ":meth:`difference() <qgis.core.QgsGeometry.difference>`, …). It can also "
#~ "compute geometric properties of geometries, such as area (in the case of "
#~ "polygons) or lengths (for polygons and lines)"
#~ msgstr ""

#~ msgid ""
#~ "Distance and area using the :class:`QgsDistanceArea "
#~ "<qgis.core.QgsDistanceArea>` class: `Distance matrix algorithm "
#~ "<https://github.com/qgis/QGIS/blob/master/python/plugins/processing/algs/qgis/PointDistance.py>`_"
#~ msgstr ""

#~ msgid ""
#~ "`Lines to polygons algorithm "
#~ "<https://github.com/qgis/QGIS/blob/master/python/plugins/processing/algs/qgis/LinesToPolygons.py>`_"
#~ msgstr ""
